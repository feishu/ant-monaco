{"stringify":{"insertText":{"value":"stringify"},"documentation":"The stringify function returns a String in JSON format representing an ECMAScript value. It can take three parameters. The first parameter is required. The value parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or null.","kind":1},"parse":{"insertText":{"value":"parse"},"documentation":"The parse function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format is a restricted form of ECMAScript literal. JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript arrays.","kind":1},"apply":{"insertText":{"value":"apply"},"documentation":"15.3.4.3 Function.prototype.apply\r\n            (thisArg, argArray)\r\n\r\n        When the apply method is called on an object func with arguments thisArg and\r\n        argArray, the following steps are taken:\r\n\r\n        \r\n          If IsCallable(func) is false, then throw a TypeError exception.\r\n          If argArray is null or undefined, then\r\n            \r\n              Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n                  this value and an empty list of arguments.\r\n            \r\n          \r\n          If Type(argArray) is not Object, then throw a TypeError exception.\r\n          Let len be the result of calling the [[Get]] internal method of argArray with argument\r\n              \"length\".\r\n          Let n be ToUint32(len).\r\n          Let argList  be an empty List.\r\n          Let index be 0.\r\n          Repeat while index < n\r\n            \r\n              Let indexName be ToString(index).\r\n              Let nextArg be the result of calling the [[Get]] internal method of argArray with indexName\r\n                  as the argument.\r\n              Append nextArg as the last element of argList.\r\n              Set index to index + 1.\r\n            \r\n          \r\n          Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n              this value and argList as the list of arguments.\r\n        \r\n\r\n        The length property of the apply method is 2.\r\n\r\n        \r\n          NOTE The thisArg value is passed without modification as the this value. This is a\r\n          change from Edition 3, where a undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is passed as the this value.","kind":1},"bind":{"insertText":{"value":"bind"},"documentation":"15.3.4.5 Function.prototype.bind\r\n            (thisArg [, arg1 [, arg2, …]])\r\n\r\n        The bind method takes one or more arguments, thisArg and (optionally) arg1, arg2, etc,\r\n        and returns a new function object by performing the following steps:\r\n\r\n        \r\n          Let Target be the this value.\r\n          If IsCallable(Target) is false, throw a TypeError exception.\r\n          Let A be a new (possibly empty) internal list of all of the argument values provided after thisArg\r\n              (arg1, arg2 etc), in order.\r\n          Let F be a new native ECMAScript object .\r\n          Set all the internal methods, except for [[Get]], of F as specified in 8.12.\r\n          Set the [[Get]] internal property of F as specified in 15.3.5.4.\r\n          Set the [[TargetFunction]] internal property of F to Target.\r\n          Set the [[BoundThis]] internal property of F to the value of thisArg.\r\n          Set the [[BoundArgs]] internal property of F to A.\r\n          Set the [[Class]] internal property of F to \"Function\".\r\n          Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified\r\n              in 15.3.3.1.\r\n          Set the [[Call]] internal property of F as described in 15.3.4.5.1.\r\n          Set the [[Construct]] internal property of F as described in 15.3.4.5.2.\r\n          Set the [[HasInstance]] internal property of F as described in 15.3.4.5.3.\r\n          If the [[Class]] internal property of Target is \"Function\", then\r\n            \r\n              Let L be the length property of Target minus the length of A.\r\n              Set the length own property of F to either 0 or L, whichever is larger.\r\n            \r\n          \r\n          Else set the length own property of F to 0.\r\n          Set the  attributes of the length own property of F  to the values specified in 15.3.5.1.\r\n          Set the [[Extensible]] internal property of F to true.\r\n          Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\n          Call the [[DefineOwnProperty]] internal method of F with arguments \"caller\", PropertyDescriptor\r\n              {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\r\n              and false.\r\n          Call the [[DefineOwnProperty]] internal method of F with arguments \"arguments\",\r\n              PropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false,\r\n              [[Configurable]]: false}, and false.\r\n          Return F.\r\n        \r\n\r\n        The length property of the bind method is 1.\r\n\r\n        \r\n          NOTE Function objects created using Function.prototype.bind do not have a\r\n          prototype property or the [[Code]], [[FormalParameters]], and [[Scope]] internal properties.\r\n        \r\n\r\n        \r\n          15.3.4.5.1 [[Call]]\r\n\r\n          When the [[Call]] internal method of a function object, F, which was created using the bind function is\r\n          called with a this value and a list of arguments ExtraArgs, the following steps are\r\n          taken:\r\n\r\n          \r\n            Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n            Let boundThis be the value of F’s [[BoundThis]] internal property.\r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            Let args be a new list containing the same values as the list boundArgs in the same order followed\r\n                by the same values as the list ExtraArgs in the same order.\r\n            Return the result of  calling the [[Call]] internal method of target providing boundThis as the\r\n                this value and providing args as the arguments.\r\n          \r\n        \r\n\r\n        \r\n          15.3.4.5.2 [[Construct]]\r\n\r\n          When the [[Construct]] internal method of a function object, F that was created using the bind function is\r\n          called with a list of arguments ExtraArgs, the following steps are taken:\r\n\r\n          \r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            If target has no [[Construct]] internal method, a TypeError exception is thrown.\r\n            Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n            Let args be a new list containing the same values as the list boundArgs in the same order followed\r\n                by the same values as the list ExtraArgs in the same order.\r\n            Return the result of calling the [[Construct]] internal method of target providing args as the\r\n                arguments.\r\n          \r\n        \r\n\r\n        \r\n          15.3.4.5.3 [[HasInstance]]\r\n              (V)\r\n\r\n          When the [[HasInstance]] internal method of a function object F, that was created using the bind function\r\n          is called with argument V, the following steps are taken:\r\n\r\n          \r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            If target has no [[HasInstance]] internal method, a TypeError exception is thrown.\r\n            Return the result of calling the [[HasInstance]] internal method of target providing V as the\r\n                argument.","kind":1},"call":{"insertText":{"value":"call"},"documentation":"15.3.4.4 Function.prototype.call\r\n            (thisArg [ , arg1 [ , arg2, … ] ] )\r\n\r\n        When the call method is called on an object func with argument thisArg and optional\r\n        arguments arg1, arg2 etc, the following steps are taken:\r\n\r\n        \r\n          If IsCallable(func) is false, then throw a TypeError exception.\r\n          Let argList be an empty List.\r\n          If this method was called with more than one argument then in left to right order starting with arg1 append\r\n              each argument as the last element of argList\r\n          Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n              this value and argList as the list of arguments.\r\n        \r\n\r\n        The length property of the call method is 1.\r\n\r\n        \r\n          NOTE The thisArg value is passed without modification as the this value. This is a\r\n          change from Edition 3, where a undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is passed as the this value.","kind":1},"toString":{"insertText":{"value":"toString"},"documentation":"15.2.4.2\r\n            Object.prototype.toString ( )\r\n\r\n        When the toString method is called, the following steps are taken:\r\n\r\n        \r\n          If the this value is undefined, return \"[object Undefined]\".\r\n          If the this value is null, return \"[object Null]\".\r\n          Let O be the result of calling ToObject passing the this value as the\r\n              argument.\r\n          Let class be the value of the [[Class]] internal property of O.\r\n          Return the String value that is the result of concatenating the three Strings \"[object \", class,\r\n              and \"]\".","kind":1},"length":{"insertText":{"value":"length"},"documentation":"The value of the length property is an integer that indicates the “typical” number of arguments expected by the function. However, the language permits the function to be invoked with some other number of arguments. The behaviour of a function when invoked on a number of arguments other than the number specified by its length property depends on the function.","kind":9},"defineProperty":{"insertText":{"value":"defineProperty"},"documentation":"The defineProperty function is used to add an own property and/or update the attributes of an existing own property of an object.","kind":1},"getOwnPropertyDescriptor":{"insertText":{"value":"getOwnPropertyDescriptor"},"documentation":"15.2.3.3\r\n            Object.getOwnPropertyDescriptor ( O, P )\r\n\r\n        When the getOwnPropertyDescriptor function is called, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          Let name be ToString(P).\r\n          Let desc be the result of calling the [[GetOwnProperty]] internal method of O with argument\r\n              name.\r\n          Return the result of calling FromPropertyDescriptor(desc) (8.10.4).","kind":1},"defineProperties":{"insertText":{"value":"defineProperties"},"documentation":"The defineProperties function is used to add own properties and/or update the attributes of existing own properties of an object.","kind":1},"create":{"insertText":{"value":"create"},"documentation":"The create function creates a new object with a specified prototype.","kind":1},"hasOwnProperty":{"insertText":{"value":"hasOwnProperty"},"documentation":"15.2.4.5\r\n            Object.prototype.hasOwnProperty (V)\r\n\r\n        When the hasOwnProperty method is called with argument V, the following steps are taken:\r\n\r\n        \r\n          Let P be ToString(V).\r\n          Let O be the result of calling ToObject passing the this value as the\r\n              argument.\r\n          Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the\r\n              argument.\r\n          If desc is undefined, return false.\r\n          Return true.\r\n        \r\n\r\n        \r\n          NOTE 1 Unlike [[HasProperty]] (8.12.6), this method does not\r\n          consider objects in the prototype chain.\r\n        \r\n\r\n        \r\n          NOTE 2 The ordering of steps 1 and 2 is chosen to ensure that any exception that would have\r\n          been thrown by step 1 in previous editions of this specification will continue to be thrown even if the this\r\n          value is undefined or null.","kind":1},"getOwnPropertyNames":{"insertText":{"value":"getOwnPropertyNames"},"documentation":"15.2.3.4\r\n            Object.getOwnPropertyNames ( O )\r\n\r\n        When the getOwnPropertyNames function is called, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          Let array be the result of creating a new object as if by the expression new Array () where\r\n              Array is the standard built-in constructor with that name.\r\n          Let n be 0.\r\n          For each named own property P of O\r\n            \r\n              Let name be the String value that is the name of P.\r\n              Call the [[DefineOwnProperty]] internal method of array with arguments ToString(n), the PropertyDescriptor {[[Value]]: name, [[Writable]]:\r\n                  true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n              Increment n by 1.\r\n            \r\n          \r\n          Return array.\r\n        \r\n\r\n        \r\n          NOTE If O is a String instance, the set of own properties processed in step 4\r\n          includes the implicit properties defined in 15.5.5.2 that correspond to character positions\r\n          within the object’s [[PrimitiveValue]] String.","kind":1},"propertyIsEnumerable":{"insertText":{"value":"propertyIsEnumerable"},"documentation":"15.2.4.7\r\n            Object.prototype.propertyIsEnumerable (V)\r\n\r\n        When the propertyIsEnumerable method is called with argument V, the following steps are\r\n        taken:\r\n\r\n        \r\n          Let P be ToString(V).\r\n          Let O be the result of calling ToObject passing the this value as the\r\n              argument.\r\n          Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the\r\n              argument.\r\n          If desc is undefined, return false.\r\n          Return the value of desc.[[Enumerable]].\r\n        \r\n\r\n        \r\n          NOTE 1 This method does not consider objects in the prototype chain.\r\n        \r\n\r\n        \r\n          NOTE 2 The ordering of steps 1 and 2 is chosen to ensure that any exception that would have\r\n          been thrown by step 1 in previous editions of this specification will continue to be thrown even if the this\r\n          value is undefined or null.","kind":1},"preventExtensions":{"insertText":{"value":"preventExtensions"},"documentation":"15.2.3.10\r\n            Object.preventExtensions ( O )\r\n\r\n        When the preventExtensions function is called, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          Set the [[Extensible]] internal property of O to false.\r\n          Return O.","kind":1},"getPrototypeOf":{"insertText":{"value":"getPrototypeOf"},"documentation":"15.2.3.2 Object.getPrototypeOf (\r\n            O )\r\n\r\n        When the getPrototypeOf function is called with argument O, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          Return the value of the [[Prototype]] internal property of O.","kind":1},"isPrototypeOf":{"insertText":{"value":"isPrototypeOf"},"documentation":"15.2.4.6\r\n            Object.prototype.isPrototypeOf (V)\r\n\r\n        When the isPrototypeOf method is called with argument V, the following steps are taken:\r\n\r\n        \r\n          If V is not an object, return false.\r\n          Let O be the result of calling ToObject passing the this value as the\r\n              argument.\r\n          Repeat\r\n            \r\n              Let V be the value of the [[Prototype]] internal property of V.\r\n              if V is null, return false\r\n              If O and V refer to the same object, return true.\r\n            \r\n          \r\n        \r\n\r\n        \r\n          NOTE The ordering of steps 1 and 2 is chosen to preserve the behaviour specified by previous\r\n          editions of this specification for the case where V is not an object and the this value is undefined or null.","kind":1},"isExtensible":{"insertText":{"value":"isExtensible"},"documentation":"15.2.3.13 Object.isExtensible (\r\n            O )\r\n\r\n        When the isExtensible function is called with argument O, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          Return the Boolean value of the [[Extensible]] internal property of O.","kind":1},"isFrozen":{"insertText":{"value":"isFrozen"},"documentation":"15.2.3.12 Object.isFrozen ( O\r\n            )\r\n\r\n        When the isFrozen function is called with argument O, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          For each named own property name P of O,\r\n            \r\n              Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.\r\n              If IsDataDescriptor(desc) is true then\r\n                \r\n                  If desc.[[Writable]] is true, return false.\r\n                \r\n              \r\n              If desc.[[Configurable]] is true, then return false.\r\n            \r\n          \r\n          If the [[Extensible]] internal property of O is false, then return true.\r\n          Otherwise, return false.","kind":1},"isSealed":{"insertText":{"value":"isSealed"},"documentation":"15.2.3.11 Object.isSealed ( O\r\n            )\r\n\r\n        When the isSealed function is called with argument O, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          For each named own property name P of O,\r\n            \r\n              Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.\r\n              If desc.[[Configurable]] is true, then return false.\r\n            \r\n          \r\n          If the [[Extensible]] internal property of O is false, then return true.\r\n          Otherwise, return false.","kind":1},"keys":{"insertText":{"value":"keys"},"documentation":"15.2.3.14 Object.keys ( O )\r\n\r\n        When the keys function is called with argument O, the following steps are taken:\r\n\r\n        \r\n          If the Type(O) is not Object, throw a TypeError exception.\r\n          Let n be the number of own enumerable properties of O\r\n          Let array be the result of creating a new Object as if by the expression new Array(n) where\r\n              Array is the standard built-in constructor with that name.\r\n          Let index be 0.\r\n          For each own enumerable property of O whose name String is P\r\n            \r\n              Call the [[DefineOwnProperty]] internal method of array with arguments ToString(index), the PropertyDescriptor {[[Value]]: P, [[Writable]]:\r\n                  true, [[Enumerable]]: true, [[Configurable]]: true}, and false.\r\n              Increment index by 1.\r\n            \r\n          \r\n          Return array.\r\n        \r\n\r\n        If an implementation defines a specific order of enumeration for the for-in statement, that same enumeration order must\r\n        be used in step 5 of this algorithm.","kind":1},"freeze":{"insertText":{"value":"freeze"},"documentation":"15.2.3.9 Object.freeze ( O )\r\n\r\n        When the freeze function is called, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          For each named own property name P of O,\r\n            \r\n              Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.\r\n              If IsDataDescriptor(desc) is true, then\r\n                \r\n                  If desc.[[Writable]] is true, set desc.[[Writable]] to false.\r\n                \r\n              \r\n              If desc.[[Configurable]] is true, set desc.[[Configurable]] to false.\r\n              Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as\r\n                  arguments.\r\n            \r\n          \r\n          Set the [[Extensible]] internal property of O to false.\r\n          Return O.","kind":1},"seal":{"insertText":{"value":"seal"},"documentation":"15.2.3.8 Object.seal ( O )\r\n\r\n        When the seal function is called, the following steps are taken:\r\n\r\n        \r\n          If Type(O) is not Object throw a TypeError exception.\r\n          For each named own property name P of O,\r\n            \r\n              Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P.\r\n              If desc.[[Configurable]] is true, set desc.[[Configurable]] to false.\r\n              Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as\r\n                  arguments.\r\n            \r\n          \r\n          Set the [[Extensible]] internal property of O to false.\r\n          Return O.","kind":1},"toLocaleString":{"insertText":{"value":"toLocaleString"},"documentation":"15.2.4.3\r\n            Object.prototype.toLocaleString ( )\r\n\r\n        When the toLocaleString method is called, the following steps are taken:\r\n\r\n        \r\n          Let O be the result of calling ToObject passing the this value as the\r\n              argument.\r\n          Let toString be the result of calling the [[Get]] internal method of O passing \"toString\" as\r\n              the argument.\r\n          If IsCallable(toString) is false, throw a TypeError exception.\r\n          Return the result of calling the [[Call]] internal method of toString passing O as the this\r\n              value and no arguments.\r\n        \r\n\r\n        \r\n          NOTE 1 This function is provided to give all Objects a generic toLocaleString\r\n          interface, even though not all may use it. Currently, Array, Number, and Date\r\n          provide their own locale-sensitive toLocaleString methods.\r\n        \r\n\r\n        \r\n          NOTE 2 The first parameter to this function is likely to be used in a future version of this\r\n          standard; it is recommended that implementations do not use this parameter position for anything else.","kind":1},"valueOf":{"insertText":{"value":"valueOf"},"documentation":"15.2.4.4 Object.prototype.valueOf\r\n            ( )\r\n\r\n        When the valueOf method is called, the following steps are taken:\r\n\r\n        \r\n          Let O be the result of calling ToObject passing the this value as the\r\n              argument.\r\n          If O is the result of calling the Object constructor with a host object (15.2.2.1), then\r\n            \r\n              Return either O or another value such as the host object originally passed to the constructor. The\r\n                  specific result that is returned is implementation-defined.\r\n            \r\n          \r\n          Return O.","kind":1}}
