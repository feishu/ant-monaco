{"version":3,"sources":["vs/vs/loader.js"],"names":["_amdLoaderGlobal","this","AMDLoader","global","isNode","module","exports","isWindows","navigator","userAgent","indexOf","process","platform","isWebWorker","importScripts","isElectronRenderer","versions","electron","type","isElectronMain","hasPerformanceNow","performance","now","getHighPerformanceTimestamp","Date","LoaderEventType","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","LoaderAvailable","prototype","record","push","getEvents","NullLoaderEventRecorder","INSTANCE","Utilities","fileUriToFilePath","uri","decodeURI","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","ConfigurationOptionsUtil","validateConfigurationOptions","options","defaultOnError","err","errorCode","console","error","moduleId","stack","neededBy","baseUrl","isBuild","paths","config","catchError","urlArgs","onError","ignoreDuplicateModules","nodeModules","nodeCachedDataWriteDelay","onNodeCachedData","data","warn","path","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","Object","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","recordStats","OnlyOnceScriptLoader","actualScriptLoader","callbackMap","load","moduleManager","scriptSrc","errorback","scriptCallbacks","triggerCallback","triggerErrorback","BrowserScriptLoader","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getElementsByTagName","appendChild","WorkerScriptLoader","NodeScriptLoader","_didInitialize","_didPatchNodeRequire","_jsflags","argv","arg","_init","_fs","_vm","_path","_crypto","_initNodeRequire","makeRequireFunction","mod","Module","constructor","require","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","nodeCachedDataDir","getConfig","that","_compile","content","replace","wrapper","wrap","cachedDataPath","_getCachedDataPath","cachedData","readFileSync","produceCachedData","Script","compileWrapper","runInThisContext","dirname","args","Buffer","apply","_processCachedData","opts","nodeInstrumenter","c","recorder","getRecorder","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","readFile","encoding","normalizedScriptSrc","normalize","vmScriptSrc","driveLetterMatch","match","toUpperCase","contents","prefix","charCodeAt","_BOM","cachedDataPath_1","_loadAndEvalScript","NodeBeginEvaluatingScript","call","RequireFunc","DefineFunc","NodeEndEvaluatingScript","basedir","hash","createHash","update","digest","basename","join","cachedDataRejected","_runSoon","unlink","cachedDataProduced","undefined","writeFile","minTimeout","timeout","ceil","random","setTimeout","scriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","r","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","BeginInvokeFactory","EndInvokeFactory","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","get","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","_recorder","_loaderAvailableTimestamp","_moduleIdProvider","_config","_scriptLoader","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","Error","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","element","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","BeginLoadingScript","EndLoadingScriptOK","EndLoadingScriptError","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","define","amd","jQuery","arguments","reset","_nodeRequire","what","NodeBeginNativeRequire","NodeEndNativeRequire"],"mappings":";;;;;;AAeA,GAAAA,kBAAAC,KACAC,WACA,SAAAA,GACAA,EAAAC,OAAAH,iBACAE,EAAAE,OAAA,mBAAAC,WAAAA,OAAAC,QACAJ,EAAAK,UAAA,WACA,SAAA,mBAAAC,YACAA,UAAAC,WAAAD,UAAAC,UAAAC,QAAA,YAAA,IAIA,mBAAAC,UACA,UAAAA,QAAAC,YAIAV,EAAAW,YAAA,kBAAAX,GAAAC,OAAAW,cACAZ,EAAAa,mBAAA,mBAAAJ,cAAA,KAAAA,QAAAK,cAAA,KAAAL,QAAAK,SAAAC,UAAA,aAAAN,QAAAO,KACAhB,EAAAiB,eAAA,mBAAAR,cAAA,KAAAA,QAAAK,cAAA,KAAAL,QAAAK,SAAAC,UAAA,YAAAN,QAAAO,KACAhB,EAAAkB,kBAAAlB,EAAAC,OAAAkB,aAAA,kBAAAnB,GAAAC,OAAAkB,YAAAC,KACApB,YAAAA,cAKA,IAAAA,YACA,SAAAA,GAcA,QAAAqB,KACA,MAAArB,GAAAkB,kBAAAlB,EAAAC,OAAAkB,YAAAC,MAAAE,KAAAF,MAdA,GAAAG,IACA,SAAAA,GACAA,EAAAA,EAAA,gBAAA,GAAA,kBACAA,EAAAA,EAAA,mBAAA,IAAA,qBACAA,EAAAA,EAAA,mBAAA,IAAA,qBACAA,EAAAA,EAAA,sBAAA,IAAA,wBACAA,EAAAA,EAAA,mBAAA,IAAA,qBACAA,EAAAA,EAAA,iBAAA,IAAA,mBACAA,EAAAA,EAAA,0BAAA,IAAA,4BACAA,EAAAA,EAAA,wBAAA,IAAA,0BACAA,EAAAA,EAAA,uBAAA,IAAA,yBACAA,EAAAA,EAAA,qBAAA,IAAA,wBACAA,EAAAvB,EAAAuB,kBAAAvB,EAAAuB,qBAIAvB,EAAAqB,4BAAAA,CACA,IAAAG,GAAA,WACA,QAAAA,GAAAR,EAAAS,EAAAC,GACA3B,KAAAiB,KAAAA,EACAjB,KAAA0B,OAAAA,EACA1B,KAAA2B,UAAAA,EAEA,MAAAF,KAEAxB,GAAAwB,YAAAA,CACA,IAAAG,GAAA,WACA,QAAAA,GAAAC,GACA7B,KAAA8B,SAAA,GAAAL,GAAAD,EAAAO,gBAAA,GAAAF,IAQA,MANAD,GAAAI,UAAAC,OAAA,SAAAhB,EAAAS,GACA1B,KAAA8B,QAAAI,KAAA,GAAAT,GAAAR,EAAAS,EAAAJ,OAEAM,EAAAI,UAAAG,UAAA,WACA,MAAAnC,MAAA8B,SAEAF,IAEA3B,GAAA2B,oBAAAA,CACA,IAAAQ,GAAA,WACA,QAAAA,MAQA,MANAA,GAAAJ,UAAAC,OAAA,SAAAhB,EAAAS,KAGAU,EAAAJ,UAAAG,UAAA,WACA,UAEAC,IAEAA,GAAAC,SAAA,GAAAD,GACAnC,EAAAmC,wBAAAA,GACAnC,YAAAA,cAKA,IAAAA,YACA,SAAAA,GACA,GAAAqC,GAAA,WACA,QAAAA,MA8EA,MAzEAA,GAAAC,kBAAA,SAAAC,GAEA,GADAA,EAAAC,UAAAD,GACAvC,EAAAK,UAAA,CACA,GAAA,eAAAoC,KAAAF,GAEA,MAAAA,GAAAG,OAAA,EAEA,IAAA,aAAAD,KAAAF,GACA,MAAAA,GAAAG,OAAA,OAIA,IAAA,aAAAD,KAAAF,GACA,MAAAA,GAAAG,OAAA,EAIA,OAAAH,IAEAF,EAAAM,WAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAE,QAAAD,EAAAC,QAAAF,EAAAF,OAAA,EAAAG,EAAAC,UAAAD,GAEAR,EAAAU,SAAA,SAAAH,EAAAC,GACA,MAAAD,GAAAE,QAAAD,EAAAC,QAAAF,EAAAF,OAAAE,EAAAE,OAAAD,EAAAC,UAAAD,GAGAR,EAAAW,oBAAA,SAAAC,GACA,MAAA,cAAAR,KAAAQ,IAKAZ,EAAAa,eAAA,SAAAD,GACA,MAAA,+CAAAR,KAAAQ,IAEAZ,EAAAc,gBAAA,SAAAC,EAAAC,GACA,GAAAD,EAAA,CACA,GAAAE,OAAA,EACA,KAAAA,IAAAF,GACAA,EAAAG,eAAAD,IACAD,EAAAC,EAAAF,EAAAE,MAKAjB,EAAAmB,QAAA,SAAAJ,GACA,GAAAI,IAAA,CAIA,OAHAnB,GAAAc,gBAAAC,EAAA,WACAI,GAAA,IAEAA,GAEAnB,EAAAoB,eAAA,SAAAL,GACA,IAAAA,GAAA,gBAAAA,GACA,MAAAA,EAEA,IAAAM,GAAAC,MAAAC,QAAAR,QASA,OARAf,GAAAc,gBAAAC,EAAA,SAAAE,EAAAO,GAEAH,EAAAJ,GADAO,GAAA,gBAAAA,GACAxB,EAAAoB,eAAAI,GAGAA,IAGAH,GAEArB,EAAAyB,wBAAA,WACA,MAAA,eAAAzB,EAAA0B,oBAAA,OAEA1B,EAAA2B,kBAAA,SAAAC,GACA,MAAA,gBAAAxB,KAAAwB,IAEA5B,IAEAA,GAAA0B,kBAAA,EACA/D,EAAAqC,UAAAA,GACArC,YAAAA,cAKA,IAAAA,YACA,SAAAA,GACA,GAAAkE,GAAA,WACA,QAAAA,MAuGA,MAlGAA,GAAAC,6BAAA,SAAAC,GACA,QAAAC,GAAAC,GACA,MAAA,SAAAA,EAAAC,WACAC,QAAAC,MAAA,YAAAH,EAAAI,SAAA,YACAF,QAAAC,MAAA,WAAAH,EAAA7C,QACA6C,EAAA7C,QAAA6C,EAAA7C,OAAAkD,OACAH,QAAAC,MAAAH,EAAA7C,OAAAkD,OAEAH,QAAAC,MAAA,+CACAD,SAAAC,MAAAH,EAAAM,WAGA,YAAAN,EAAAC,WACAC,QAAAC,MAAA,0BAAAH,EAAAI,SAAA,6BACAF,QAAAC,MAAAH,EAAA7C,aACA6C,EAAA7C,QAAA6C,EAAA7C,OAAAkD,OACAH,QAAAC,MAAAH,EAAA7C,OAAAkD,aAJA,GA+DA,MAtDAP,GAAAA,MACA,gBAAAA,GAAAS,UACAT,EAAAS,QAAA,IAEA,iBAAAT,GAAAU,UACAV,EAAAU,SAAA,GAEA,gBAAAV,GAAAW,QACAX,EAAAW,UAEA,gBAAAX,GAAAY,SACAZ,EAAAY,eAEA,KAAAZ,EAAAa,aAEAb,EAAAa,WAAAjF,EAAAW,aAEA,gBAAAyD,GAAAc,UACAd,EAAAc,QAAA,IAEA,kBAAAd,GAAAe,UACAf,EAAAe,QAAAd,GAEA,gBAAAD,GAAAgB,wBAAAzB,MAAAC,QAAAQ,EAAAgB,0BACAhB,EAAAgB,2BAEAhB,EAAAS,QAAA/B,OAAA,IACA9C,EAAAqC,UAAAU,SAAAqB,EAAAS,QAAA,OACAT,EAAAS,SAAA,MAGAlB,MAAAC,QAAAQ,EAAAiB,eACAjB,EAAAiB,iBAEA,gBAAAjB,GAAAkB,0BAAAlB,EAAAkB,yBAAA,KACAlB,EAAAkB,yBAAA,KAEA,kBAAAlB,GAAAmB,mBACAnB,EAAAmB,iBAAA,SAAAjB,EAAAkB,GACAlB,IAGA,uBAAAA,EAAAC,UACAC,QAAAiB,KAAA,mCAAAnB,EAAAoB,MAEA,WAAApB,EAAAC,WAAA,cAAAD,EAAAC,WACAC,QAAAC,MAAA,sCAAAH,EAAAoB,MACAlB,QAAAC,MAAAH,EAAA7C,SAGA+C,QAAAC,MAAAH,MAIAF,GAEAF,EAAAyB,0BAAA,SAAAC,EAAAC,OACA,KAAAD,IAAAA,EAAA,UACA,KAAAC,IAAAA,EAAA,KACA,IAAAnC,GAAA1D,EAAAqC,UAAAoB,eAAAoC,MAgBA,OAdA7F,GAAAqC,UAAAc,gBAAAyC,EAAA,SAAAtC,EAAAO,GACA,2BAAAP,OAAA,KAAAI,EAAA0B,uBACA1B,EAAA0B,uBAAA1B,EAAA0B,uBAAAU,OAAAjC,GAEA,UAAAP,OAAA,KAAAI,EAAAqB,MACA/E,EAAAqC,UAAAc,gBAAAU,EAAA,SAAAkC,EAAAC,GAAA,MAAAtC,GAAAqB,MAAAgB,GAAAC,IAEA,WAAA1C,OAAA,KAAAI,EAAAsB,OACAhF,EAAAqC,UAAAc,gBAAAU,EAAA,SAAAkC,EAAAC,GAAA,MAAAtC,GAAAsB,OAAAe,GAAAC,IAGAtC,EAAAJ,GAAAtD,EAAAqC,UAAAoB,eAAAI,KAGAK,EAAAC,6BAAAT,IAEAQ,IAEAlE,GAAAkE,yBAAAA,CACA,IAAA+B,GAAA,WACA,QAAAA,GAAA7B,GAKA,GAJArE,KAAAqE,QAAAF,EAAAyB,0BAAAvB,GACArE,KAAAmG,mCACAnG,KAAAoG,wBACApG,KAAAqG,0BACA,KAAArG,KAAAqE,QAAAS,QAAA,CACA,GAAA7E,EAAAE,QAAAH,KAAAqE,QAAAiC,aAAAtG,KAAAqE,QAAAiC,YAAAC,MAAAvG,KAAAqE,QAAAiC,YAAAC,KAAAC,SAAA,CACA,GAAAC,GAAAzG,KAAAqE,QAAAiC,YAAAC,KAAAC,SACAE,EAAAC,KAAAC,IAAAH,EAAAI,YAAA,KAAAJ,EAAAI,YAAA,MACA7G,MAAAqE,QAAAS,QAAA2B,EAAAK,UAAA,EAAAJ,EAAA,GAEA,GAAAzG,EAAAE,QAAAH,KAAAqE,QAAAoC,SAAA,CACA,GAAAA,GAAAzG,KAAAqE,QAAAoC,SACAC,EAAAC,KAAAC,IAAAH,EAAAI,YAAA,KAAAJ,EAAAI,YAAA,MACA7G,MAAAqE,QAAAS,QAAA2B,EAAAK,UAAA,EAAAJ,EAAA,KAsLA,MAlLAR,GAAAlE,UAAAmE,iCAAA,WAEAnG,KAAA+G,4BACA,KAAA,GAAAC,GAAA,EAAAA,EAAAhH,KAAAqE,QAAAgB,uBAAAtC,OAAAiE,IACAhH,KAAA+G,0BAAA/G,KAAAqE,QAAAgB,uBAAA2B,KAAA,GAGAd,EAAAlE,UAAAoE,sBAAA,WAEApG,KAAAiH,eAAAC,OAAAC,OAAA,KACA,KAAA,GAAAC,GAAA,EAAAC,EAAArH,KAAAqE,QAAAiB,YAAA8B,EAAAC,EAAAtE,OAAAqE,IAAA,CACA,GAAAE,GAAAD,EAAAD,EACApH,MAAAiH,eAAAK,IAAA,IAGApB,EAAAlE,UAAAqE,wBAAA,WACA,GAAAkB,GAAAvH,IAGAA,MAAAwH,oBACAvH,EAAAqC,UAAAc,gBAAApD,KAAAqE,QAAAW,MAAA,SAAAyC,EAAAC,GACA9D,MAAAC,QAAA6D,GAOAH,EAAAC,iBAAAtF,MACAuF,KAAAA,EACAC,GAAAA,IARAH,EAAAC,iBAAAtF,MACAuF,KAAAA,EACAC,IAAAA,OAUA1H,KAAAwH,iBAAAG,KAAA,SAAAC,EAAAC,GACA,MAAAA,GAAAJ,KAAA1E,OAAA6E,EAAAH,KAAA1E,UAQAmD,EAAAlE,UAAA8F,cAAA,SAAAzD,GACA,MAAA,IAAA6B,GAAA/B,EAAAyB,0BAAAvB,EAAArE,KAAAqE,WAKA6B,EAAAlE,UAAA+F,kBAAA,WACA,MAAA/H,MAAAqE,SAEA6B,EAAAlE,UAAAgG,YAAA,SAAArD,GAEA,IAAA,GADAsD,GACAjB,EAAA,EAAAkB,EAAAlI,KAAAwH,iBAAAzE,OAAAiE,EAAAkB,EAAAlB,IAEA,GADAiB,EAAAjI,KAAAwH,iBAAAR,GACA/G,EAAAqC,UAAAM,WAAA+B,EAAAsD,EAAAR,MAAA,CAEA,IAAA,GADA9D,MACAwE,EAAA,EAAAC,EAAAH,EAAAP,GAAA3E,OAAAoF,EAAAC,EAAAD,IACAxE,EAAAzB,KAAA+F,EAAAP,GAAAS,GAAAxD,EAAAhC,OAAAsF,EAAAR,KAAA1E,QAEA,OAAAY,GAGA,OAAAgB,IAEAuB,EAAAlE,UAAAqG,iBAAA,SAAAnF,GACA,MAAAjD,GAAAqC,UAAAW,oBAAAC,GACAA,EAAA,IAAAlD,KAAAqE,QAAAc,QAGAjC,EAAA,IAAAlD,KAAAqE,QAAAc,SAGAe,EAAAlE,UAAAsG,4BAAA,SAAApF,GACA,MAAAlD,MAAAqE,QAAAc,QACAnF,KAAAqI,iBAAAnF,GAEAA,GAEAgD,EAAAlE,UAAAuG,6BAAA,SAAAC,GACA,GAAAxI,KAAAqE,QAAAc,QACA,IAAA,GAAA6B,GAAA,EAAAkB,EAAAM,EAAAzF,OAAAiE,EAAAkB,EAAAlB,IACAwB,EAAAxB,GAAAhH,KAAAqI,iBAAAG,EAAAxB,GAGA,OAAAwB,IAKAtC,EAAAlE,UAAAyG,gBAAA,SAAA9D,GACA,IAAA,IAAA3E,KAAAiH,eAAAtC,GAEA,MAAA3E,MAAA+E,WAEA,WAIA,QAAAJ,EAGA,IACA+D,GADA/E,EAAAgB,CAEA,IAAA1E,EAAAqC,UAAAU,SAAAW,EAAA,QAAA1D,EAAAqC,UAAAa,eAAAQ,GAeA1D,EAAAqC,UAAAU,SAAAW,EAAA,QAAA1D,EAAAqC,UAAAW,oBAAAU,KACAA,GAAA,OAEA+E,GAAA/E,OAlBA,CACA+E,EAAA1I,KAAAgI,YAAArE,EACA,KAAA,GAAAqD,GAAA,EAAAkB,EAAAQ,EAAA3F,OAAAiE,EAAAkB,EAAAlB,IACAhH,KAAA+E,WAAA,WAAA2D,EAAA1B,KAGA/G,EAAAqC,UAAAa,eAAAuF,EAAA1B,MACA0B,EAAA1B,GAAAhH,KAAAqE,QAAAS,QAAA4D,EAAA1B,IAEA/G,EAAAqC,UAAAU,SAAA0F,EAAA1B,GAAA,QAAA/G,EAAAqC,UAAAW,oBAAAyF,EAAA1B,MACA0B,EAAA1B,GAAA0B,EAAA1B,GAAA,QAUA,MAAAhH,MAAAuI,6BAAAG,IAKAxC,EAAAlE,UAAA2G,aAAA,SAAAzF,GACA,GAAAS,GAAAT,CAOA,OANAjD,GAAAqC,UAAAa,eAAAQ,KACAA,EAAA3D,KAAAgI,YAAArE,GAAA,GACA1D,EAAAqC,UAAAa,eAAAQ,KACAA,EAAA3D,KAAAqE,QAAAS,QAAAnB,IAGA3D,KAAAsI,4BAAA3E,IAKAuC,EAAAlE,UAAA+C,QAAA,WACA,MAAA/E,MAAAqE,QAAAU,SAKAmB,EAAAlE,UAAA4G,6BAAA,SAAAjE,GACA,MAAA3E,MAAA+G,0BAAAvD,eAAAmB,IAKAuB,EAAAlE,UAAA6G,mBAAA,SAAAlE,GACA,GAAA3E,KAAAqE,QAAAY,OACA,MAAAjF,MAAAqE,QAAAY,OAAAN,IAMAuB,EAAAlE,UAAA8G,iBAAA,WACA,MAAA9I,MAAAqE,QAAAa,YAKAgB,EAAAlE,UAAA+G,kBAAA,WACA,MAAA/I,MAAAqE,QAAA2E,aAKA9C,EAAAlE,UAAAoD,QAAA,SAAAb,GACAvE,KAAAqE,QAAAe,QAAAb,IAEA2B,IAEAjG,GAAAiG,cAAAA,GACAjG,YAAAA,cAKA,IAAAA,YACA,SAAAA,GAIA,GAAAgJ,GAAA,WACA,QAAAA,GAAAC,GACAlJ,KAAAkJ,mBAAAA,EACAlJ,KAAAmJ,eA6BA,MA3BAF,GAAAjH,UAAAoH,KAAA,SAAAC,EAAAC,EAAAhG,EAAAiG,GACA,GAAAhC,GAAAvH,KACAwJ,GACAlG,SAAAA,EACAiG,UAAAA,EAEA,IAAAvJ,KAAAmJ,YAAA3F,eAAA8F,GAEA,WADAtJ,MAAAmJ,YAAAG,GAAApH,KAAAsH,EAGAxJ,MAAAmJ,YAAAG,IAAAE,GACAxJ,KAAAkJ,mBAAAE,KAAAC,EAAAC,EAAA,WAAA,MAAA/B,GAAAkC,gBAAAH,IAAA,SAAA/E,GAAA,MAAAgD,GAAAmC,iBAAAJ,EAAA/E,MAEA0E,EAAAjH,UAAAyH,gBAAA,SAAAH,GACA,GAAAE,GAAAxJ,KAAAmJ,YAAAG,SACAtJ,MAAAmJ,YAAAG,EACA,KAAA,GAAAtC,GAAA,EAAAA,EAAAwC,EAAAzG,OAAAiE,IACAwC,EAAAxC,GAAA1D,YAGA2F,EAAAjH,UAAA0H,iBAAA,SAAAJ,EAAA/E,GACA,GAAAiF,GAAAxJ,KAAAmJ,YAAAG,SACAtJ,MAAAmJ,YAAAG,EACA,KAAA,GAAAtC,GAAA,EAAAA,EAAAwC,EAAAzG,OAAAiE,IACAwC,EAAAxC,GAAAuC,UAAAhF,IAGA0E,KAEAU,EAAA,WACA,QAAAA,MA8BA,MAxBAA,GAAA3H,UAAA4H,gBAAA,SAAAC,EAAAvG,EAAAiG,GACA,GAAAO,GAAA,WACAD,EAAAE,oBAAA,OAAAC,GACAH,EAAAE,oBAAA,QAAAE,IAEAD,EAAA,SAAAE,GACAJ,IACAxG,KAEA2G,EAAA,SAAAC,GACAJ,IACAP,EAAAW,GAEAL,GAAAM,iBAAA,OAAAH,GACAH,EAAAM,iBAAA,QAAAF,IAEAN,EAAA3H,UAAAoH,KAAA,SAAAC,EAAAC,EAAAhG,EAAAiG,GACA,GAAAM,GAAAO,SAAAC,cAAA,SACAR,GAAAS,aAAA,QAAA,SACAT,EAAAS,aAAA,OAAA,mBACAtK,KAAA4J,gBAAAC,EAAAvG,EAAAiG,GACAM,EAAAS,aAAA,MAAAhB,GACAc,SAAAG,qBAAA,QAAA,GAAAC,YAAAX,IAEAF,KAEAc,EAAA,WACA,QAAAA,MAWA,MATAA,GAAAzI,UAAAoH,KAAA,SAAAC,EAAAC,EAAAhG,EAAAiG,GACA,IACA1I,cAAAyI,GACAhG,IAEA,MAAA4G,GACAX,EAAAW,KAGAO,KAEAC,EAAA,WACA,QAAAA,KACA1K,KAAA2K,gBAAA,EACA3K,KAAA4K,sBAAA,EAEA5K,KAAA6K,SAAA,EACA,KAAA,GAAAzD,GAAA,EAAAC,EAAA3G,QAAAoK,KAAA1D,EAAAC,EAAAtE,OAAAqE,IAAA,CACA,GAAA2D,GAAA1D,EAAAD,EACA,IAAA,IAAA2D,EAAAtK,QAAA,eAAA,CACAT,KAAA6K,SAAAE,CACA,SAmMA,MA/LAL,GAAA1I,UAAAgJ,MAAA,SAAA1E,GACAtG,KAAA2K,iBAGA3K,KAAA2K,gBAAA,EACA3K,KAAAiL,IAAA3E,EAAA,MACAtG,KAAAkL,IAAA5E,EAAA,MACAtG,KAAAmL,MAAA7E,EAAA,QACAtG,KAAAoL,QAAA9E,EAAA,YAIAoE,EAAA1I,UAAAqJ,iBAAA,SAAA/E,EAAA+C,GAQA,QAAAiC,GAAAC,GACA,GAAAC,GAAAD,EAAAE,YACAC,EAAA,SAAA/F,GACA,IACA,MAAA4F,GAAAG,QAAA/F,GAEA,UAUA,OANA+F,GAAAC,QAAA,SAAAC,GACA,MAAAJ,GAAAK,iBAAAD,EAAAL,IAEAG,EAAAnF,KAAA7F,QAAAoL,WACAJ,EAAAK,WAAAP,EAAAQ,YACAN,EAAAO,MAAAT,EAAAU,OACAR,EAvBA,GAAAS,GAAA9C,EAAA+C,YAAArE,oBAAAoE,iBACA,IAAAA,IAAAnM,KAAA4K,qBAAA,CAGA5K,KAAA4K,sBAAA,CACA,IAAAyB,GAAArM,KACAwL,EAAAlF,EAAA,SAmBAkF,GAAAxJ,UAAAsK,SAAA,SAAAC,EAAA/F,GAEA+F,EAAAA,EAAAC,QAAA,QAAA,GAEA,IAAAC,GAAAjB,EAAAkB,KAAAH,GACAI,EAAAN,EAAAO,mBAAAT,EAAA3F,GACAnC,GAAAmC,SAAAA,EACA,KACAnC,EAAAwI,WAAAR,EAAApB,IAAA6B,aAAAH,GAEA,MAAAzC,GACA7F,EAAA0I,mBAAA,EAEA,GAAAlD,GAAA,GAAAwC,GAAAnB,IAAA8B,OAAAP,EAAApI,GACA4I,EAAApD,EAAAqD,iBAAA7I,GACA8I,EAAAd,EAAAlB,MAAAgC,QAAA3G,GACAkF,EAAAJ,EAAAtL,MACAoN,GAAApN,KAAAK,QAAAqL,EAAA1L,KAAAwG,EAAA2G,EAAAzM,QAAAT,EAAAC,OAAAmN,QACA1J,EAAAsJ,EAAAK,MAAAtN,KAAAK,QAAA+M,EAEA,OADAf,GAAAkB,mBAAAlE,EAAAQ,EAAA8C,GACAhJ,KAGA+G,EAAA1I,UAAAoH,KAAA,SAAAC,EAAAC,EAAAhG,EAAAiG,GACA,GAAAhC,GAAAvH,KACAwN,EAAAnE,EAAA+C,YAAArE,oBACAzB,EAAAkH,EAAAlH,aAAArG,EAAAC,OAAAoG,YACAmH,EAAAD,EAAAC,kBAAA,SAAAC,GAAA,MAAAA,GACA1N,MAAAgL,MAAA1E,GACAtG,KAAAqL,iBAAA/E,EAAA+C,EACA,IAAAsE,GAAAtE,EAAAuE,aACA,IAAA,UAAAlL,KAAA4G,GAAA,CACA,GAAAuE,GAAAvE,EAAAwE,MAAA,KACAC,EAAA,IACA,KACAA,EAAAzH,EAAAuH,EAAA,IAEA,MAAAtJ,GAEA,WADAgF,GAAAhF,GAGA8E,EAAA2E,gCAAA,WAAA,MAAAD,KACAzK,QAGAgG,GAAArJ,EAAAqC,UAAAC,kBAAA+G,GACAtJ,KAAAiL,IAAAgD,SAAA3E,GAAA4E,SAAA,QAAA,SAAA3J,EAAAkB,GACA,GAAAlB,EAEA,WADAgF,GAAAhF,EAGA,IAAA4J,GAAA5G,EAAA4D,MAAAiD,UAAA9E,GACA+E,EAAAF,CAEA,IAAAlO,EAAAa,mBAAA,CACA,GAAAwN,GAAAD,EAAAE,MAAA,kBAGAF,GAFAC,EAEA,YAAAA,EAAA,GAAAE,cAAA,IAAAF,EAAA,IAAA9B,QAAA,MAAA,KAIA,UAAA6B,EAGA,GAAAI,GAAAC,EAAA,uDAQA,IANAD,EADAhJ,EAAAkJ,WAAA,KAAAjE,EAAAkE,KACAF,EAAAjJ,EAAAqB,UAAA,GAFA,QAKA4H,EAAAjJ,EALA,QAOAgJ,EAAAhB,EAAAgB,EAAAN,GACAX,EAAArB,kBAIA,CACA,GAAA0C,GAAAtH,EAAAqF,mBAAAY,EAAArB,kBAAA7C,EACA/B,GAAA0D,IAAAgD,SAAAY,EAAA,SAAAtK,EAAAsI,GAEA,GAAAxI,IACAmC,SAAA6H,EACAtB,sBAAA,KAAAF,EACAA,WAAAA,GAEAhD,EAAAtC,EAAAuH,mBAAAxF,EAAA+E,EAAAI,EAAApK,EAAAsJ,EACArK,KACAiE,EAAAgG,mBAAAlE,EAAAQ,EAAAgF,SAdAtH,GAAAuH,mBAAAxF,EAAA+E,EAAAI,GAAAjI,SAAA6H,GAAAV,GACArK,OAmBAoH,EAAA1I,UAAA8M,mBAAA,SAAAxF,EAAA+E,EAAAI,EAAApK,EAAAsJ,GAEAA,EAAA1L,OAAAhC,EAAAuB,gBAAAuN,0BAAAzF,EACA,IAAAO,GAAA,GAAA7J,MAAAkL,IAAA8B,OAAAyB,EAAApK,EAKA,OAJAwF,GAAAqD,iBAAA7I,GACA2K,KAAA/O,EAAAC,OAAAD,EAAAgP,YAAAhP,EAAAiP,WAAAb,EAAArO,KAAAmL,MAAAgC,QAAA7D,IAEAqE,EAAA1L,OAAAhC,EAAAuB,gBAAA2N,wBAAA7F,GACAO,GAEAa,EAAA1I,UAAA4K,mBAAA,SAAAwC,EAAA5I,GACA,GAAA6I,GAAArP,KAAAoL,QAAAkE,WAAA,OAAAC,OAAA/I,EAAA,QAAA+I,OAAAvP,KAAA6K,SAAA,QAAA2E,OAAA,OACAC,EAAAzP,KAAAmL,MAAAsE,SAAAjJ,GAAAgG,QAAA,QAAA,GACA,OAAAxM,MAAAmL,MAAAuE,KAAAN,EAAAK,EAAA,IAAAJ,EAAA,UAEA3E,EAAA1I,UAAAuL,mBAAA,SAAAlE,EAAAQ,EAAA8C,GACA,GAAApF,GAAAvH,IACA6J,GAAA8F,oBAEAtG,EAAA+C,YAAArE,oBAAAvC,kBACAhB,UAAA,qBACAmB,KAAAgH,IAEAjC,EAAAkF,SAAA,WACA,MAAArI,GAAA0D,IAAA4E,OAAAlD,EAAA,SAAApI,GACAA,GACA8E,EAAA+C,YAAArE,oBAAAvC,kBACAhB,UAAA,SACAmB,KAAAgH,EACAjL,OAAA6C,OAIA8E,EAAA+C,YAAArE,oBAAAxC,2BAEAsE,EAAAiG,qBAEAzG,EAAA+C,YAAArE,oBAAAvC,qBAAAuK,IACApK,KAAAgH,EACA5J,OAAA8G,EAAAgD,WAAA9J,SAGA2H,EAAAkF,SAAA,WACA,MAAArI,GAAA0D,IAAA+E,UAAArD,EAAA9C,EAAAgD,WAAA,SAAAtI,GACAA,GACA8E,EAAA+C,YAAArE,oBAAAvC,kBACAhB,UAAA,YACAmB,KAAAgH,EACAjL,OAAA6C,OAIA8E,EAAA+C,YAAArE,oBAAAxC,4BAGAmF,EAAAkF,SAAA,SAAAtM,EAAA2M,GACA,GAAAC,GAAAD,EAAAtJ,KAAAwJ,KAAAxJ,KAAAyJ,SAAAH,EACAI,YAAA/M,EAAA4M,IAEAxF,IAEAA,GAAAkE,KAAA,MACA3O,EAAAqQ,aAAA,GAAArH,GAAAhJ,EAAAW,YACA,GAAA6J,GACAxK,EAAAE,OACA,GAAAuK,GACA,GAAAf,KACA1J,YAAAA,cAKA,IAAAA,YACA,SAAAA,GAGA,GAAAsQ,GAAA,WACA,QAAAA,GAAAC,GACA,GAAAC,GAAAD,EAAA3J,YAAA,IAEA7G,MAAA0Q,gBADA,IAAAD,EACAD,EAAA7N,OAAA,EAAA8N,EAAA,GAGA,GAoCA,MA9BAF,GAAAI,mBAAA,SAAAhM,GACA,GAAAiM,GAAAC,EAAAlM,CAGA,KADAiM,EAAA,SACAA,EAAAlO,KAAAmO,IACAA,EAAAA,EAAArE,QAAAoE,EAAA,IAMA,KAHAC,EAAAA,EAAArE,QAAA,SAAA,IAEAoE,EAAA,uEACAA,EAAAlO,KAAAmO,IACAA,EAAAA,EAAArE,QAAAoE,EAAA,IAIA,OADAC,GAAAA,EAAArE,QAAA,sEAAA,KAMA+D,EAAAvO,UAAA8O,cAAA,SAAAnM,GACA,GAAAhB,GAAAgB,CAMA,OALA1E,GAAAqC,UAAAa,eAAAQ,KACA1D,EAAAqC,UAAAM,WAAAe,EAAA,OAAA1D,EAAAqC,UAAAM,WAAAe,EAAA,UACAA,EAAA4M,EAAAI,mBAAA3Q,KAAA0Q,eAAA/M,IAGAA,GAEA4M,IAEAA,GAAAQ,KAAA,GAAAR,GAAA,IACAtQ,EAAAsQ,iBAAAA,CAGA,IAAA/E,GAAA,WACA,QAAAA,GAAAtH,EAAA8M,EAAAC,EAAA3N,EAAAiG,EAAA2H,GACAlR,KAAAkE,GAAAA,EACAlE,KAAAgR,MAAAA,EACAhR,KAAAiR,aAAAA,EACAjR,KAAAmR,UAAA7N,EACAtD,KAAAoR,WAAA7H,EACAvJ,KAAAkR,iBAAAA,EACAlR,KAAAK,WACAL,KAAAqR,iBAAA,EACArR,KAAAsR,4BAAAtR,KAAAiR,aAAAlO,OACA/C,KAAAuR,aAAA,EA4EA,MA1EA/F,GAAAgG,oBAAA,SAAAlO,EAAA8J,GACA,IACA,OACAqE,cAAAnO,EAAAgK,MAAArN,EAAAC,OAAAkN,GACAsE,cAAA,MAGA,MAAAxH,GACA,OACAuH,cAAA,KACAC,cAAAxH,KAIAsB,EAAAmG,eAAA,SAAA1M,EAAA2M,EAAAtO,EAAAuO,GACA,MAAA5M,GAAAF,YAAA9E,EAAAqC,UAAA2B,kBAAA2N,IAEAH,cAAA,KACAC,cAAA,MAGAzM,EAAA6D,mBACA9I,KAAAwR,oBAAAlO,EAAAuO,IAGAJ,cAAAnO,EAAAgK,MAAArN,EAAAC,OAAA2R,GACAH,cAAA,OAGAlG,EAAAxJ,UAAA8P,SAAA,SAAAnE,EAAA1I,EAAA4M,GACA7R,KAAAuR,aAAA,CACA,IAAAG,GAAA,IACA,IAAA1R,KAAAmR,UACA,GAAA,kBAAAnR,MAAAmR,UAAA,CACAxD,EAAA1L,OAAAhC,EAAAuB,gBAAAuQ,mBAAA/R,KAAAgR,MACA,IAAAH,GAAArF,EAAAmG,eAAA1M,EAAAjF,KAAAgR,MAAAhR,KAAAmR,UAAAU,EACAH,GAAAb,EAAAa,cACA/D,EAAA1L,OAAAhC,EAAAuB,gBAAAwQ,iBAAAhS,KAAAgR,OACAU,OAAA,KAAAb,EAAAY,eAAAzR,KAAAqR,kBAAApR,EAAAqC,UAAAmB,QAAAzD,KAAAK,WACAL,KAAAK,QAAAwQ,EAAAY,mBAIAzR,MAAAK,QAAAL,KAAAmR,SAGAO,IACAzM,EAAAG,SACAZ,UAAA,UACAG,SAAA3E,KAAAgR,MACAtP,OAAAgQ,IAGA1R,KAAAiR,aAAA,KACAjR,KAAAmR,UAAA,KACAnR,KAAAoR,WAAA,KACApR,KAAAkR,iBAAA,MAKA1F,EAAAxJ,UAAAiQ,kBAAA,SAAA1N,GACA,QAAAvE,KAAAoR,aACApR,KAAAoR,WAAA7M,IACA,IAOAiH,EAAAxJ,UAAAkQ,WAAA,WACA,MAAAlS,MAAAuR,aAEA/F,IAEAvL,GAAAuL,OAAAA,CACA,IAAA2G,GAAA,WACA,QAAAA,KACAnS,KAAAoS,QAAA,EACApS,KAAAqS,0BAAA,GAAAC,KACAtS,KAAAuS,6BAEAvS,KAAAwS,YAAA,WACAxS,KAAAwS,YAAA,UACAxS,KAAAwS,YAAA,WAiBA,MAfAL,GAAAnQ,UAAAyQ,eAAA,WACA,MAAAzS,MAAAoS,SAEAD,EAAAnQ,UAAAwQ,YAAA,SAAAZ,GACA,GAAA1N,GAAAlE,KAAAqS,0BAAAK,IAAAd,EAMA,YALA,KAAA1N,IACAA,EAAAlE,KAAAoS,UACApS,KAAAqS,0BAAAM,IAAAf,EAAA1N,GACAlE,KAAAuS,0BAAArO,GAAA0N,GAEA1N,GAEAiO,EAAAnQ,UAAA4Q,eAAA,SAAAjO,GACA,MAAA3E,MAAAuS,0BAAA5N,IAEAwN,KAEAU,EAAA,WACA,QAAAA,GAAA3O,GACAlE,KAAAkE,GAAAA,EAEA,MAAA2O,KAEAA,GAAAC,QAAA,GAAAD,GAAA,GACAA,EAAAE,OAAA,GAAAF,GAAA,GACAA,EAAAG,QAAA,GAAAH,GAAA,GACA5S,EAAA4S,kBAAAA,CACA,IAAAI,GAAA,WACA,QAAAA,GAAA/O,EAAAgP,EAAAC,GACAnT,KAAAkE,GAAAA,EACAlE,KAAAkT,SAAAA,EACAlT,KAAAmT,YAAAA,EAEA,MAAAF,KAEAhT,GAAAgT,iBAAAA,CACA,IAAAG,GAAA,WACA,QAAAA,GAAA9C,EAAAzO,OACA,KAAAA,IAAAA,EAAA,GACA7B,KAAAqT,UAAA,KACArT,KAAAsT,0BAAAzR,EACA7B,KAAAuT,kBAAA,GAAApB,GACAnS,KAAAwT,QAAA,GAAAvT,GAAAiG,cACAlG,KAAAyT,cAAAnD,EACAtQ,KAAA0T,aACA1T,KAAA2T,kBACA3T,KAAA4T,yBACA5T,KAAA6T,4BAAA,GAAAvB,KACAtS,KAAA8T,6BAAA,KACA9T,KAAA+T,kBACA/T,KAAAgU,yBACAhU,KAAAiU,0BA+fA,MA7fAb,GAAAc,6BAAA,SAAApR,EAAA8B,GAIA,IAAA,GAHAwJ,GAAA,SAAA+F,GAAA,MAAAA,GAAA3H,QAAA,MAAA,MACA4H,EAAAhG,EAAAtL,GACAuR,EAAAzP,EAAAkJ,MAAA,MACA9G,EAAA,EAAAA,EAAAqN,EAAAtR,OAAAiE,IAAA,CACA,GAAAsN,GAAAD,EAAArN,GAAAuH,MAAA,uBACA,IAAA+F,EAAA,CACA,GAAAC,GAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAA/N,KAAAC,IAAA2N,EAAA1N,YAAA,KAAA,EAAA0N,EAAA1N,YAAA,KAAA,EAGA,IAFA0N,EAAAA,EAAA5R,OAAA+R,IACAH,EAAAnG,EAAAmG,MACAH,EAAA,CACA,GAAAvD,IACA8D,KAAAC,SAAAJ,EAAA,IACAK,IAAAD,SAAAH,EAAA,IAKA,OAHA,KAAA5D,EAAA8D,OACA9D,EAAAgE,KAAA,wDAAA9R,QAEA8N,IAIA,KAAA,IAAAiE,OAAA,mDAAAhS,IAEAsQ,EAAApR,UAAA+S,aAAA,WACA,IAAA/U,KAAAwT,QAAAzO,UACA,MAAA,KAGA,KAAA,GADApB,MAAAqR,EAAA,EACAhO,EAAA,EAAAkB,EAAAlI,KAAA0T,UAAA3Q,OAAAiE,EAAAkB,EAAAlB,IAAA,CACA,GAAAsN,GAAAtU,KAAA0T,UAAA1M,EACA,IAAAsN,EAAA,CAGA,GAAAW,GAAAjV,KAAA+T,eAAAO,EAAApQ,KAAA,KACAgR,EAAAlV,KAAAgU,sBAAAM,EAAApQ,KAAA,KACA+M,EAAAjR,KAAAiU,uBAAAK,EAAApQ,GACAP,GAAAqR,MACA9Q,GAAAoQ,EAAAtD,MACArL,KAAAsP,EACAE,eAAAF,GAAAC,EAAA9B,EAAAc,6BAAAe,EAAAC,GAAA,KACAjE,aAAAA,EACAmE,KAAA,KACA/U,QAAAiU,EAAAjU,UAGA,MAAAsD,IAEAyP,EAAApR,UAAA4L,YAAA,WASA,MARA5N,MAAAqT,YACArT,KAAAwT,QAAAzK,oBACA/I,KAAAqT,UAAA,GAAApT,GAAA2B,oBAAA5B,KAAAsT,2BAGAtT,KAAAqT,UAAApT,EAAAmC,wBAAAC,UAGArC,KAAAqT,WAEAD,EAAApR,UAAAqT,gBAAA,WACA,MAAArV,MAAA4N,cAAAzL,aAOAiR,EAAApR,UAAAgM,6BAAA,SAAAiD,EAAA3N,GACA,GAAA,OAAAtD,KAAA8T,6BACA,KAAA,IAAAgB,OAAA,0DAEA,IAAAlQ,GAAA,IACA5E,MAAAwT,QAAAzO,YACAH,EAAA,GAAAkQ,OAAA,iBAAAlQ,OAEA5E,KAAA8T,8BACAlP,MAAAA,EACAqM,aAAAA,EACA3N,SAAAA,IASA8P,EAAApR,UAAAsT,aAAA,SAAA1D,EAAAX,EAAA3N,EAAAiG,EAAA3E,EAAAsM,GACA,GAAA3J,GAAAvH,SACA,KAAAkR,IAAAA,EAAA,GAAAX,GAAAqB,GACA,IAAAjN,GAAA3E,KAAAuT,kBAAAf,YAAAZ,EACA,IAAA5R,KAAA0T,UAAA/O,GAKA,YAJA3E,KAAAwT,QAAA5K,6BAAAgJ,IACAnN,QAAAiB,KAAA,mCAAAkM,EAAA,KAKA,IAAA0C,GAAA,GAAA9I,GAAA7G,EAAAiN,EAAA5R,KAAAuV,uBAAAtE,EAAAC,GAAA5N,EAAAiG,EAAA2H,EACAlR,MAAA0T,UAAA/O,GAAA2P,EACAtU,KAAAwT,QAAAzO,YACA/E,KAAAgU,sBAAArP,GAAAC,EACA5E,KAAAiU,uBAAAtP,GAAA2P,EAAArD,aAAAuE,IAAA,SAAAC,GAAA,MAAAlO,GAAAgM,kBAAAX,eAAA6C,EAAAvR,OAIAlE,KAAA0V,SAAApB,IAEAlB,EAAApR,UAAA2T,qBAAA,SAAAC,EAAA1E,GACA,GAAA,YAAA0E,EACA,MAAA/C,GAAAC,OAEA,IAAA,WAAA8C,EACA,MAAA/C,GAAAE,MAEA,IAAA,YAAA6C,EACA,MAAA/C,GAAAG,OAGA,IAAA6C,GAAAD,EAAAnV,QAAA,IACA,IAAAoV,GAAA,EAAA,CACA,GAAAC,GAAA5E,EAAAJ,cAAA8E,EAAAjT,OAAA,EAAAkT,IACA1C,EAAAjC,EAAAJ,cAAA8E,EAAAjT,OAAAkT,EAAA,IACAE,EAAA/V,KAAAuT,kBAAAf,YAAAsD,EAAA,IAAA3C,GACAD,EAAAlT,KAAAuT,kBAAAf,YAAAsD,EACA,OAAA,IAAA7C,GAAA8C,EAAA7C,EAAAC,GAEA,MAAA,IAAAN,GAAA7S,KAAAuT,kBAAAf,YAAAtB,EAAAJ,cAAA8E,MAEAxC,EAAApR,UAAAuT,uBAAA,SAAAtE,EAAAC,GAEA,IAAA,GADAvN,MAAAqR,EAAA,EACAhO,EAAA,EAAAkB,EAAA+I,EAAAlO,OAAAiE,EAAAkB,EAAAlB,IACArD,EAAAqR,KAAAhV,KAAA2V,qBAAA1E,EAAAjK,GAAAkK,EAEA,OAAAvN,IAEAyP,EAAApR,UAAAgU,iBAAA,SAAA9E,EAAAD,EAAA3N,EAAAiG,GACA,GAAA,gBAAA0H,GACA,MAAAjR,MAAAiW,mBAAAhF,EAAAC,EAEAlR,MAAAsV,aAAArV,EAAAqC,UAAAyB,0BAAAkN,EAAA3N,EAAAiG,EAAA,KAAA2H,IAOAkC,EAAApR,UAAAiU,mBAAA,SAAAC,EAAAhF,OACA,KAAAA,IAAAA,EAAA,GAAAX,GAAA2F,GACA,IAAAN,GAAA5V,KAAA2V,qBAAAO,EAAAhF,GACAoD,EAAAtU,KAAA0T,UAAAkC,EAAA1R,GACA,KAAAoQ,EACA,KAAA,IAAAQ,OAAA,qEAAAoB,EAAA,+CAEA,KAAA5B,EAAApC,aACA,KAAA,IAAA4C,OAAA,qEAAAoB,EAAA,uDAEA,OAAA5B,GAAAjU,SAEA+S,EAAApR,UAAAmU,UAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAtW,KAAAwT,QAAAzK,mBAEA/I,MAAAwT,QADA6C,EACA,GAAApW,GAAAiG,cAAAkQ,GAGApW,KAAAwT,QAAA1L,cAAAsO,GAEApW,KAAAwT,QAAAzK,sBAAAuN,IACAtW,KAAAqT,UAAA,OAGAD,EAAApR,UAAAoK,UAAA,WACA,MAAApM,MAAAwT,SAMAJ,EAAApR,UAAAuU,QAAA,SAAA5R,GACA,GAAA,OAAA3E,KAAA8T,6BAAA,CACA,GAAA0C,GAAAxW,KAAA8T,4BACA9T,MAAA8T,6BAAA,KAEA9T,KAAAsV,aAAAtV,KAAAuT,kBAAAX,eAAAjO,GAAA6R,EAAAvF,aAAAuF,EAAAlT,SAAA,KAAAkT,EAAA5R,SAGAwO,EAAApR,UAAAyU,iBAAA,SAAA9R,EAAAJ,GACA,GAAAgD,GAAAvH,IAGA,QACAwE,UAAA,OACAG,SAJA3E,KAAAuT,kBAAAX,eAAAjO,GAKAE,UAJA7E,KAAA4T,sBAAAjP,QAAA6Q,IAAA,SAAAkB,GAAA,MAAAnP,GAAAgM,kBAAAX,eAAA8D,KAKAhV,OAAA6C,IAOA6O,EAAApR,UAAA2U,aAAA,SAAAhS,EAAAJ,GAIA,IAAA,GAHAG,GAAA1E,KAAAyW,iBAAA9R,EAAAJ,GAEAqS,KACA5P,EAAA,EAAAkB,EAAAlI,KAAAuT,kBAAAd,iBAAAzL,EAAAkB,EAAAlB,IACA4P,EAAA5P,IAAA,CAEA,IAAA6P,IAAA,EACAC,IAGA,KAFAA,EAAA5U,KAAAyC,GACAiS,EAAAjS,IAAA,EACAmS,EAAA/T,OAAA,GAAA,CACA,GAAAgU,GAAAD,EAAAE,QACA1C,EAAAtU,KAAA0T,UAAAqD,EACAzC,KACAuC,EAAAvC,EAAArC,kBAAAvN,IAAAmS,EAEA,IAAAI,GAAAjX,KAAA4T,sBAAAmD,EACA,IAAAE,EACA,IAAA,GAAAjQ,GAAA,EAAAkB,EAAA+O,EAAAlU,OAAAiE,EAAAkB,EAAAlB,IAAA,CACA,GAAAkQ,GAAAD,EAAAjQ,EACA4P,GAAAM,KACAJ,EAAA5U,KAAAgV,GACAN,EAAAM,IAAA,IAKAL,GACA7W,KAAAwT,QAAApO,QAAAV,IASA0O,EAAApR,UAAAmV,mBAAA,SAAAC,EAAAC,GACA,GAAA5P,GAAAzH,KAAA0T,UAAA0D,EACA,KAAA3P,EACA,OAAA,CAGA,KAAA,GADA6P,MACAtQ,EAAA,EAAAkB,EAAAlI,KAAAuT,kBAAAd,iBAAAzL,EAAAkB,EAAAlB,IACAsQ,EAAAtQ,IAAA,CAEA,IAAA8P,KAIA,KAFAA,EAAA5U,KAAAuF,GACA6P,EAAAF,IAAA,EACAN,EAAA/T,OAAA,GAAA,CAEA,GAAAwU,GAAAT,EAAAE,QACA/F,EAAAsG,EAAAtG,YACA,IAAAA,EAEA,IAAA,GAAAjK,GAAA,EAAAkB,EAAA+I,EAAAlO,OAAAiE,EAAAkB,EAAAlB,IAAA,CACA,GAAA4O,GAAA3E,EAAAjK,EACA,IAAA4O,EAAA1R,KAAAmT,EAEA,OAAA,CAEA,IAAAG,GAAAxX,KAAA0T,UAAAkC,EAAA1R,GACAsT,KAAAF,EAAA1B,EAAA1R,MAEAoT,EAAA1B,EAAA1R,KAAA,EACA4S,EAAA5U,KAAAsV,KAMA,OAAA,GAQApE,EAAApR,UAAAyV,eAAA,SAAAL,EAAAC,EAAAK,GACA,GAAAN,IAAAC,GAAA,KAAAK,EACA,OAAAN,EAEA,IAAA3P,GAAAzH,KAAA0T,UAAA0D,EACA,KAAA3P,EACA,MAAA,KAIA,KAAA,GADAwJ,GAAAxJ,EAAAwJ,aACAjK,EAAA,EAAAkB,EAAA+I,EAAAlO,OAAAiE,EAAAkB,EAAAlB,IAAA,CACA,GAAArB,GAAA3F,KAAAyX,eAAAxG,EAAAjK,GAAA9C,GAAAmT,EAAAK,EAAA,EACA,IAAA,OAAA/R,EAEA,MADAA,GAAAzD,KAAAkV,GACAzR,EAGA,MAAA,OAKAyN,EAAApR,UAAA2V,eAAA,SAAAzG,GACA,GAAA3J,GAAAvH,KACA2D,EAAA,SAAAsN,EAAA3N,EAAAiG,GACA,MAAAhC,GAAAyO,iBAAA9E,EAAAD,EAAA3N,EAAAiG,GASA,OAPA5F,GAAAiU,MAAA,SAAA1T,GACA,MAAAqD,GAAAiM,QAAA7K,aAAAuI,EAAAJ,cAAA5M,KAEAP,EAAAkU,SAAA,WACA,MAAAtQ,GAAA8N,mBAEA1R,EAAAmU,iBAAA7X,EAAAC,OAAAoG,YACA3C,GAEAyP,EAAApR,UAAA+V,YAAA,SAAApT,GACA,GAAA4C,GAAAvH,IACA,KAAAA,KAAA0T,UAAA/O,KAAA3E,KAAA2T,eAAAhP,GAAA,CAIA3E,KAAA2T,eAAAhP,IAAA,CACA,IAAAiN,GAAA5R,KAAAuT,kBAAAX,eAAAjO,GACAK,EAAAhF,KAAAwT,QAAA/K,gBAAAmJ,EACA3R,GAAAE,SAAA,IAAAyR,EAAAnR,QAAA,MACAuE,EAAA9C,KAAA,QAAA0P,EAEA,IAAAoG,IAAA,EACAC,EAAA,SAAA1T,GAEA,KADAyT,GACAhT,EAAAjC,OAEAwE,EAAAoP,aAAAhS,EAAAJ,OAEA,CACA,GAAA2T,GAAAlT,EAAAgT,GACAG,EAAA5Q,EAAAqG,aACA,IAAArG,EAAAiM,QAAAzO,WAAA,WAAAmT,EAIA,MAHA3Q,GAAAwM,eAAApP,GAAAuT,EACA3Q,EAAA+N,aAAA/N,EAAAgM,kBAAAX,eAAAjO,MAAA,KAAA,KAAA,UACA4C,GAAAgP,QAAA5R,EAGAwT,GAAAlW,OAAAhC,EAAAuB,gBAAA4W,mBAAAF,GACA3Q,EAAAkM,cAAArK,KAAA7B,EAAA2Q,EAAA,WACA3Q,EAAAiM,QAAAzO,YACAwC,EAAAwM,eAAApP,GAAAuT,GAEAC,EAAAlW,OAAAhC,EAAAuB,gBAAA6W,mBAAAH,GACA3Q,EAAAgP,QAAA5R,IACA,SAAAJ,GACA4T,EAAAlW,OAAAhC,EAAAuB,gBAAA8W,sBAAAJ,GACAD,EAAA1T,MAIA0T,GAAA,QAQA7E,EAAApR,UAAAuW,sBAAA,SAAAC,EAAAC,GACA,GAAAlR,GAAAvH,IACA,KAAAA,KAAA0T,UAAA+E,EAAAvU,MAAAlE,KAAA2T,eAAA8E,EAAAvU,IAAA,CAIAlE,KAAA2T,eAAA8E,EAAAvU,KAAA,CAEA,IAAAkF,GAAA,SAAAtF,GACAyD,EAAA+N,aAAA/N,EAAAgM,kBAAAX,eAAA6F,EAAAvU,OAAAJ,EAAA,KAAA,MAEAsF,GAAA1E,MAAA,SAAAH,GACAgD,EAAAiM,QAAApO,QAAAmC,EAAAkP,iBAAAgC,EAAAvU,GAAAK,KAEAiU,EAAApP,KAAAqP,EAAAtF,YAAAnT,KAAA2X,eAAApH,EAAAQ,MAAA3H,EAAApJ,KAAAwT,QAAAzL,uBAKAqL,EAAApR,UAAA0T,SAAA,SAAAtV,GAGA,IAAA,GAFAmH,GAAAvH,KACAiR,EAAA7Q,EAAA6Q,aACAjK,EAAA,EAAAkB,EAAA+I,EAAAlO,OAAAiE,EAAAkB,EAAAlB,IAAA,CACA,GAAA4O,GAAA3E,EAAAjK,EACA,IAAA4O,IAAA/C,EAAAC,QAKA,GAAA8C,IAAA/C,EAAAE,OAIA,GAAA6C,IAAA/C,EAAAG,QAAA,CAIA,GAAAwE,GAAAxX,KAAA0T,UAAAkC,EAAA1R,GACA,IAAAsT,GAAAA,EAAAtF,aACA9R,EAAAkR,kCAGA,IAAAtR,KAAAmX,mBAAAvB,EAAA1R,GAAA9D,EAAA8D,IAAA,CACAO,QAAAiB,KAAA,wCAAA1F,KAAAuT,kBAAAX,eAAAgD,EAAA1R,IAAA,UAAAlE,KAAAuT,kBAAAX,eAAAxS,EAAA8D,IAAA,8BACA,IAAAwU,GAAA1Y,KAAAyX,eAAA7B,EAAA1R,GAAA9D,EAAA8D,GAAA,EACAwU,GAAAC,UACAD,EAAAxW,KAAA0T,EAAA1R,IACAO,QAAAiB,KAAAgT,EAAAlD,IAAA,SAAAtR,GAAA,MAAAqD,GAAAgM,kBAAAX,eAAA1O,KAAAwL,KAAA,WAEAtP,EAAAkR,kCAMA,IAFAtR,KAAA4T,sBAAAgC,EAAA1R,IAAAlE,KAAA4T,sBAAAgC,EAAA1R,QACAlE,KAAA4T,sBAAAgC,EAAA1R,IAAAhC,KAAA9B,EAAA8D,IACA0R,YAAA3C,GAAA,CACA,GAAAuF,GAAAxY,KAAA0T,UAAAkC,EAAA1C,SACA,IAAAsF,GAAAA,EAAAtG,aAAA,CACAlS,KAAAuY,sBAAAC,EAAAnY,QAAAuV,EACA,UAGA,GAAAgD,GAAA5Y,KAAA6T,4BAAAnB,IAAAkD,EAAA1C,SACA0F,KACAA,KACA5Y,KAAA6T,4BAAAlB,IAAAiD,EAAA1C,SAAA0F,IAEAA,EAAA1W,KAAA0T,GACA5V,KAAA+X,YAAAnC,EAAA1C,cAGAlT,MAAA+X,YAAAnC,EAAA1R,QArCA9D,GAAAkR,kCAJAlR,GAAAkR,kCALAlR,GAAAiR,iBAAA,EACAjR,EAAAkR,8BA+CA,IAAAlR,EAAAkR,6BACAtR,KAAA6Y,kBAAAzY,IAGAgT,EAAApR,UAAA6W,kBAAA,SAAAzY,GACA,GAAAmH,GAAAvH,KACA2N,EAAA3N,KAAA4N,aACA,KAAAxN,EAAA8R,aAAA,CAMA,IAAA,GAFAjB,GAAA7Q,EAAA6Q,aACAY,KACA7K,EAAA,EAAAkB,EAAA+I,EAAAlO,OAAAiE,EAAAkB,EAAAlB,IAAA,CACA,GAAA4O,GAAA3E,EAAAjK,EACA,IAAA4O,IAAA/C,EAAAC,QAIA,GAAA8C,IAAA/C,EAAAE,OASA,GAAA6C,IAAA/C,EAAAG,QAAA,CAIA,GAAAwE,GAAAxX,KAAA0T,UAAAkC,EAAA1R,GAEA2N,GAAA7K,GADAwQ,EACAA,EAAAnX,QAGA,SARAwR,GAAA7K,GAAAhH,KAAA2X,eAAAvX,EAAA8Q,sBATAW,GAAA7K,IACA9C,GAAA9D,EAAA4Q,MACA/L,OAAA,WACA,MAAAsC,GAAAiM,QAAA3K,mBAAAzI,EAAA4Q,aAPAa,GAAA7K,GAAA5G,EAAAC,QAuBAD,EAAA0R,SAAAnE,EAAA3N,KAAAwT,QAAA3B,EAEA,IAAAoF,GAAAjX,KAAA4T,sBAAAxT,EAAA8D,GAEA,IADAlE,KAAA4T,sBAAAxT,EAAA8D,IAAA,KACA+S,EAGA,IAAA,GAAAjQ,GAAA,EAAAkB,EAAA+O,EAAAlU,OAAAiE,EAAAkB,EAAAlB,IAAA,CACA,GAAA8R,GAAA7B,EAAAjQ,GACA+R,EAAA/Y,KAAA0T,UAAAoF,EACAC,GAAAzH,8BACA,IAAAyH,EAAAzH,6BACAtR,KAAA6Y,kBAAAE,GAIA,GAAAH,GAAA5Y,KAAA6T,4BAAAnB,IAAAtS,EAAA8D,GACA,IAAA0U,EAAA,CAGA5Y,KAAA6T,4BAAAmF,OAAA5Y,EAAA8D,GAEA,KAAA,GAAA8C,GAAA,EAAAkB,EAAA0Q,EAAA7V,OAAAiE,EAAAkB,EAAAlB,IACAhH,KAAAuY,sBAAAnY,EAAAC,QAAAuY,EAAA5R,OAIAoM,IAEAnT,GAAAmT,cAAAA,GACAnT,YAAAA,cAOA,IAAAgZ,QACAhZ,WACA,SAAAA,GACA,GAAAoJ,GACAxH,EACAqN,EAAA,WACA,QAAAA,GAAAhL,EAAA+M,EAAA3N,GACA,gBAAAY,KACAZ,EAAA2N,EACAA,EAAA/M,EACAA,EAAA,MAEA,gBAAA+M,IAAArN,MAAAC,QAAAoN,KACA3N,EAAA2N,EACAA,EAAA,MAEAA,IACAA,GAAA,UAAA,UAAA,WAEA/M,EACAmF,EAAAiM,aAAApR,EAAA+M,EAAA3N,EAAA,KAAA,MAGA+F,EAAA2E,6BAAAiD,EAAA3N,GAGA,MAAA4L,KAEAA,GAAAgK,KACAC,QAAA,GAEAlZ,EAAAiP,WAAAA,CACA,IAAAD,GAAA,WACA,QAAAA,KACA,GAAA,IAAAmK,UAAArW,OAAA,CACA,GAAAqW,UAAA,YAAAlS,UAAAtD,MAAAC,QAAAuV,UAAA,IAEA,WADAnK,GAAAhK,OAAAmU,UAAA,GAGA,IAAA,gBAAAA,WAAA,GACA,MAAA/P,GAAA4M,mBAAAmD,UAAA,IAGA,IAAA,IAAAA,UAAArW,QAAA,IAAAqW,UAAArW,SACAa,MAAAC,QAAAuV,UAAA,IAEA,WADA/P,GAAAiM,aAAArV,EAAAqC,UAAAyB,0BAAAqV,UAAA,GAAAA,UAAA,GAAAA,UAAA,GAAA,KAIA,MAAA,IAAAtE,OAAA,6BA2BA,MAzBA7F,GAAAhK,OAAA,SAAAmR,EAAAC,OACA,KAAAA,IAAAA,GAAA,GACAhN,EAAA8M,UAAAC,EAAAC,IAEApH,EAAA7C,UAAA,WACA,MAAA/C,GAAA+C,YAAArE,qBAKAkH,EAAAoK,MAAA,WACAhQ,EAAA,GAAApJ,GAAAmT,cAAAnT,EAAAqQ,aAAAzO,IAKAoN,EAAA8F,aAAA,WACA,MAAA1L,GAAA0L,gBAKA9F,EAAA4I,SAAA,WACA,MAAAxO,GAAAgM,mBAEApG,IAEAhP,GAAAgP,YAAAA,EA0CA,kBAAAhP,GAAAC,OAAA+Y,QAAAhZ,EAAAC,OAAA+Y,OAAAC,OAzCA,WAEA,GADA7P,EAAA,GAAApJ,GAAAmT,cAAAnT,EAAAqQ,aAAAzO,GACA5B,EAAAE,OAAA,CACA,GAAAmZ,GAAArZ,EAAAC,OAAAwL,SAAAA,QACApF,EAAA,SAAAiT,GACAlQ,EAAAuE,cAAA3L,OAAAhC,EAAAuB,gBAAAgY,uBAAAD,EACA,KACA,MAAAD,GAAAC,GAEA,QACAlQ,EAAAuE,cAAA3L,OAAAhC,EAAAuB,gBAAAiY,qBAAAF,IAGAtZ,GAAAC,OAAAoG,YAAAA,EACA2I,EAAA3I,YAAAA,EAEArG,EAAAE,SAAAF,EAAAa,oBACAV,OAAAC,QAAA4O,EAEAgK,OAAA,WACA/J,EAAA5B,MAAA,KAAA8L,YAEA1N,QAAAuD,QAIA,KAAAhP,EAAAC,OAAAwL,SAAA,kBAAAzL,GAAAC,OAAAwL,SACAuD,EAAAhK,OAAAhF,EAAAC,OAAAwL,SAEAzL,EAAAa,mBAIAmY,OAAA,WACA/J,EAAA5B,MAAA,KAAA8L,YAJAnZ,EAAAC,OAAA+Y,OAAAA,OAAA/J,EAOAjP,EAAAC,OAAAwL,QAAAuD,EACAhP,EAAAC,OAAAwL,QAAAoM,iBAAAxR,MAKAzE,EAAA5B,EAAAqB,gCAEArB,YAAAA","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\nvar _amdLoaderGlobal = this;\nvar AMDLoader;\n(function (AMDLoader) {\n    AMDLoader.global = _amdLoaderGlobal;\n    AMDLoader.isNode = (typeof module !== 'undefined' && !!module.exports);\n    AMDLoader.isWindows = (function _isWindows() {\n        if (typeof navigator !== 'undefined') {\n            if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                return true;\n            }\n        }\n        if (typeof process !== 'undefined') {\n            return (process.platform === 'win32');\n        }\n        return false;\n    })();\n    AMDLoader.isWebWorker = (typeof AMDLoader.global.importScripts === 'function');\n    AMDLoader.isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n    AMDLoader.isElectronMain = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'browser');\n    AMDLoader.hasPerformanceNow = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var LoaderEventType;\n    (function (LoaderEventType) {\n        LoaderEventType[LoaderEventType[\"LoaderAvailable\"] = 1] = \"LoaderAvailable\";\n        LoaderEventType[LoaderEventType[\"BeginLoadingScript\"] = 10] = \"BeginLoadingScript\";\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptOK\"] = 11] = \"EndLoadingScriptOK\";\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptError\"] = 12] = \"EndLoadingScriptError\";\n        LoaderEventType[LoaderEventType[\"BeginInvokeFactory\"] = 21] = \"BeginInvokeFactory\";\n        LoaderEventType[LoaderEventType[\"EndInvokeFactory\"] = 22] = \"EndInvokeFactory\";\n        LoaderEventType[LoaderEventType[\"NodeBeginEvaluatingScript\"] = 31] = \"NodeBeginEvaluatingScript\";\n        LoaderEventType[LoaderEventType[\"NodeEndEvaluatingScript\"] = 32] = \"NodeEndEvaluatingScript\";\n        LoaderEventType[LoaderEventType[\"NodeBeginNativeRequire\"] = 33] = \"NodeBeginNativeRequire\";\n        LoaderEventType[LoaderEventType[\"NodeEndNativeRequire\"] = 34] = \"NodeEndNativeRequire\";\n    })(LoaderEventType = AMDLoader.LoaderEventType || (AMDLoader.LoaderEventType = {}));\n    function getHighPerformanceTimestamp() {\n        return (AMDLoader.hasPerformanceNow ? AMDLoader.global.performance.now() : Date.now());\n    }\n    AMDLoader.getHighPerformanceTimestamp = getHighPerformanceTimestamp;\n    var LoaderEvent = (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(LoaderEventType.LoaderAvailable, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        return NullLoaderEventRecorder;\n    }());\n    NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var Utilities = (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (uri) {\n            uri = decodeURI(uri);\n            if (AMDLoader.isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or file:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key = void 0;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Array.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return /^===anonymous/.test(id);\n        };\n        return Utilities;\n    }());\n    Utilities.NEXT_ANONYMOUS_ID = 1;\n    AMDLoader.Utilities = Utilities;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    var ConfigurationOptionsUtil = (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\n            function defaultOnError(err) {\n                if (err.errorCode === 'load') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error('Detail: ', err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.errorCode === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                // Catch errors by default in web workers, do not catch errors by default in other contexts\n                options.catchError = AMDLoader.isWebWorker;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Array.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            if (typeof options.nodeCachedDataWriteDelay !== 'number' || options.nodeCachedDataWriteDelay < 0) {\n                options.nodeCachedDataWriteDelay = 1000 * 7;\n            }\n            if (typeof options.onNodeCachedData !== 'function') {\n                options.onNodeCachedData = function (err, data) {\n                    if (!err) {\n                        // ignore\n                    }\n                    else if (err.errorCode === 'cachedDataRejected') {\n                        console.warn('Rejected cached data from file: ' + err.path);\n                    }\n                    else if (err.errorCode === 'unlink' || err.errorCode === 'writeFile') {\n                        console.error('Problems writing cached data file: ' + err.path);\n                        console.error(err.detail);\n                    }\n                    else {\n                        console.error(err);\n                    }\n                };\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = (function () {\n        function Configuration(options) {\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createNodeModulesMap();\n            this._createSortedPathsRules();\n            if (this.options.baseUrl === '') {\n                if (AMDLoader.isNode && this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (AMDLoader.isNode && this.options.nodeMain) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createNodeModulesMap = function () {\n            // Build a map out of nodeModules array\n            this.nodeModulesMap = Object.create(null);\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\n                var nodeModule = _a[_i];\n                this.nodeModulesMap[nodeModule] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Array.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (AMDLoader.Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.nodeModulesMap[moduleId] === true) {\n                // This is a node module...\n                if (this.isBuild()) {\n                    // ...and we are at build time, drop it\n                    return ['empty:'];\n                }\n                else {\n                    // ...and at runtime we create a `shortcut`-path\n                    return ['node|' + moduleId];\n                }\n            }\n            var result = moduleId;\n            var results;\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = (function () {\n        function OnlyOnceScriptLoader(actualScriptLoader) {\n            this.actualScriptLoader = actualScriptLoader;\n            this.callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this.callbackMap.hasOwnProperty(scriptSrc)) {\n                this.callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this.callbackMap[scriptSrc] = [scriptCallbacks];\n            this.actualScriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this.callbackMap[scriptSrc];\n            delete this.callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this.callbackMap[scriptSrc];\n            delete this.callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            this.attachListeners(script, callback, errorback);\n            script.setAttribute('src', scriptSrc);\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = (function () {\n        function WorkerScriptLoader() {\n        }\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            try {\n                importScripts(scriptSrc);\n                callback();\n            }\n            catch (e) {\n                errorback(e);\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = (function () {\n        function NodeScriptLoader() {\n            this._didInitialize = false;\n            this._didPatchNodeRequire = false;\n            // js-flags have an impact on cached data\n            this._jsflags = '';\n            for (var _i = 0, _a = process.argv; _i < _a.length; _i++) {\n                var arg = _a[_i];\n                if (arg.indexOf('--js-flags=') === 0) {\n                    this._jsflags = arg;\n                    break;\n                }\n            }\n        }\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._didInitialize) {\n                return;\n            }\n            this._didInitialize = true;\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n        };\n        // patch require-function of nodejs such that we can manually create a script\n        // from cached data. this is done by overriding the `Module._compile` function\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\n            var nodeCachedDataDir = moduleManager.getConfig().getOptionsLiteral().nodeCachedDataDir;\n            if (!nodeCachedDataDir || this._didPatchNodeRequire) {\n                return;\n            }\n            this._didPatchNodeRequire = true;\n            var that = this;\n            var Module = nodeRequire('module');\n            function makeRequireFunction(mod) {\n                var Module = mod.constructor;\n                var require = function require(path) {\n                    try {\n                        return mod.require(path);\n                    }\n                    finally {\n                        // nothing\n                    }\n                };\n                require.resolve = function resolve(request) {\n                    return Module._resolveFilename(request, mod);\n                };\n                require.main = process.mainModule;\n                require.extensions = Module._extensions;\n                require.cache = Module._cache;\n                return require;\n            }\n            Module.prototype._compile = function (content, filename) {\n                // remove shebang\n                content = content.replace(/^#!.*/, '');\n                // create wrapper function\n                var wrapper = Module.wrap(content);\n                var cachedDataPath = that._getCachedDataPath(nodeCachedDataDir, filename);\n                var options = { filename: filename };\n                try {\n                    options.cachedData = that._fs.readFileSync(cachedDataPath);\n                }\n                catch (e) {\n                    options.produceCachedData = true;\n                }\n                var script = new that._vm.Script(wrapper, options);\n                var compileWrapper = script.runInThisContext(options);\n                var dirname = that._path.dirname(filename);\n                var require = makeRequireFunction(this);\n                var args = [this.exports, require, this, filename, dirname, process, AMDLoader.global, Buffer];\n                var result = compileWrapper.apply(this.exports, args);\n                that._processCachedData(moduleManager, script, cachedDataPath);\n                return result;\n            };\n        };\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\n            var _this = this;\n            var opts = moduleManager.getConfig().getOptionsLiteral();\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            this._initNodeRequire(nodeRequire, moduleManager);\n            var recorder = moduleManager.getRecorder();\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports_1 = null;\n                try {\n                    moduleExports_1 = nodeRequire(pieces[1]);\n                }\n                catch (err) {\n                    errorback(err);\n                    return;\n                }\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\n                callback();\n            }\n            else {\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(scriptSrc);\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    var normalizedScriptSrc = _this._path.normalize(scriptSrc);\n                    var vmScriptSrc = normalizedScriptSrc;\n                    // Make the script src friendly towards electron\n                    if (AMDLoader.isElectronRenderer) {\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/i);\n                        if (driveLetterMatch) {\n                            // windows\n                            vmScriptSrc = \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\n                        }\n                        else {\n                            // nix\n                            vmScriptSrc = \"file://\" + vmScriptSrc;\n                        }\n                    }\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        contents = prefix + data.substring(1) + suffix;\n                    }\n                    else {\n                        contents = prefix + data + suffix;\n                    }\n                    contents = nodeInstrumenter(contents, normalizedScriptSrc);\n                    if (!opts.nodeCachedDataDir) {\n                        _this._loadAndEvalScript(scriptSrc, vmScriptSrc, contents, { filename: vmScriptSrc }, recorder);\n                        callback();\n                    }\n                    else {\n                        var cachedDataPath_1 = _this._getCachedDataPath(opts.nodeCachedDataDir, scriptSrc);\n                        _this._fs.readFile(cachedDataPath_1, function (err, cachedData) {\n                            // create script options\n                            var options = {\n                                filename: vmScriptSrc,\n                                produceCachedData: typeof cachedData === 'undefined',\n                                cachedData: cachedData\n                            };\n                            var script = _this._loadAndEvalScript(scriptSrc, vmScriptSrc, contents, options, recorder);\n                            callback();\n                            _this._processCachedData(moduleManager, script, cachedDataPath_1);\n                        });\n                    }\n                });\n            }\n        };\n        NodeScriptLoader.prototype._loadAndEvalScript = function (scriptSrc, vmScriptSrc, contents, options, recorder) {\n            // create script, run script\n            recorder.record(AMDLoader.LoaderEventType.NodeBeginEvaluatingScript, scriptSrc);\n            var script = new this._vm.Script(contents, options);\n            var r = script.runInThisContext(options);\n            r.call(AMDLoader.global, AMDLoader.RequireFunc, AMDLoader.DefineFunc, vmScriptSrc, this._path.dirname(scriptSrc));\n            // signal done\n            recorder.record(AMDLoader.LoaderEventType.NodeEndEvaluatingScript, scriptSrc);\n            return script;\n        };\n        NodeScriptLoader.prototype._getCachedDataPath = function (basedir, filename) {\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(this._jsflags, 'utf8').digest('hex');\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\n            return this._path.join(basedir, basename + \"-\" + hash + \".code\");\n        };\n        NodeScriptLoader.prototype._processCachedData = function (moduleManager, script, cachedDataPath) {\n            var _this = this;\n            if (script.cachedDataRejected) {\n                // data rejected => delete cache file\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                    errorCode: 'cachedDataRejected',\n                    path: cachedDataPath\n                });\n                NodeScriptLoader._runSoon(function () {\n                    return _this._fs.unlink(cachedDataPath, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                                errorCode: 'unlink',\n                                path: cachedDataPath,\n                                detail: err\n                            });\n                        }\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n            else if (script.cachedDataProduced) {\n                // data produced => tell outside world\n                moduleManager.getConfig().getOptionsLiteral().onNodeCachedData(undefined, {\n                    path: cachedDataPath,\n                    length: script.cachedData.length\n                });\n                // data produced => write cache file\n                NodeScriptLoader._runSoon(function () {\n                    return _this._fs.writeFile(cachedDataPath, script.cachedData, function (err) {\n                        if (err) {\n                            moduleManager.getConfig().getOptionsLiteral().onNodeCachedData({\n                                errorCode: 'writeFile',\n                                path: cachedDataPath,\n                                detail: err\n                            });\n                        }\n                    });\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedDataWriteDelay);\n            }\n        };\n        NodeScriptLoader._runSoon = function (callback, minTimeout) {\n            var timeout = minTimeout + Math.ceil(Math.random() * minTimeout);\n            setTimeout(callback, timeout);\n        };\n        return NodeScriptLoader;\n    }());\n    NodeScriptLoader._BOM = 0xFEFF;\n    AMDLoader.scriptLoader = new OnlyOnceScriptLoader(AMDLoader.isWebWorker ?\n        new WorkerScriptLoader()\n        : AMDLoader.isNode ?\n            new NodeScriptLoader()\n            : new BrowserScriptLoader());\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = (function () {\n        function ModuleIdResolver(fromModuleId) {\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        return ModuleIdResolver;\n    }());\n    ModuleIdResolver.ROOT = new ModuleIdResolver('');\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = (function () {\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\n            this.id = id;\n            this.strId = strId;\n            this.dependencies = dependencies;\n            this._callback = callback;\n            this._errorback = errorback;\n            this.moduleIdResolver = moduleIdResolver;\n            this.exports = {};\n            this.exportsPassedIn = false;\n            this.unresolvedDependenciesCount = this.dependencies.length;\n            this._isComplete = false;\n        }\n        Module._safeInvokeFunction = function (callback, args) {\n            try {\n                return {\n                    returnedValue: callback.apply(AMDLoader.global, args),\n                    producedError: null\n                };\n            }\n            catch (e) {\n                return {\n                    returnedValue: null,\n                    producedError: e\n                };\n            }\n        };\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            if (config.shouldCatchError()) {\n                return this._safeInvokeFunction(callback, dependenciesValues);\n            }\n            return {\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\n                producedError: null\n            };\n        };\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\n            this._isComplete = true;\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    recorder.record(AMDLoader.LoaderEventType.BeginInvokeFactory, this.strId);\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\n                    producedError = r.producedError;\n                    recorder.record(AMDLoader.LoaderEventType.EndInvokeFactory, this.strId);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\n                        this.exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this.exports = this._callback;\n                }\n            }\n            if (producedError) {\n                config.onError({\n                    errorCode: 'factory',\n                    moduleId: this.strId,\n                    detail: producedError\n                });\n            }\n            this.dependencies = null;\n            this._callback = null;\n            this._errorback = null;\n            this.moduleIdResolver = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._isComplete;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    var ModuleIdProvider = (function () {\n        function ModuleIdProvider() {\n            this._nextId = 0;\n            this._strModuleIdToIntModuleId = new Map();\n            this._intModuleIdToStrModuleId = [];\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\n            this.getModuleId('exports');\n            this.getModuleId('module');\n            this.getModuleId('require');\n        }\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\n            return this._nextId;\n        };\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\n            if (typeof id === 'undefined') {\n                id = this._nextId++;\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\n                this._intModuleIdToStrModuleId[id] = strModuleId;\n            }\n            return id;\n        };\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\n            return this._intModuleIdToStrModuleId[moduleId];\n        };\n        return ModuleIdProvider;\n    }());\n    var RegularDependency = (function () {\n        function RegularDependency(id) {\n            this.id = id;\n        }\n        return RegularDependency;\n    }());\n    RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\n    RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\n    RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\n    AMDLoader.RegularDependency = RegularDependency;\n    var PluginDependency = (function () {\n        function PluginDependency(id, pluginId, pluginParam) {\n            this.id = id;\n            this.pluginId = pluginId;\n            this.pluginParam = pluginParam;\n        }\n        return PluginDependency;\n    }());\n    AMDLoader.PluginDependency = PluginDependency;\n    var ModuleManager = (function () {\n        function ModuleManager(scriptLoader, loaderAvailableTimestamp) {\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\n            this._recorder = null;\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\n            this._moduleIdProvider = new ModuleIdProvider();\n            this._config = new AMDLoader.Configuration();\n            this._scriptLoader = scriptLoader;\n            this._modules2 = [];\n            this._knownModules2 = [];\n            this._inverseDependencies2 = [];\n            this._inversePluginDependencies2 = new Map();\n            this._currentAnnonymousDefineCall = null;\n            this._buildInfoPath = [];\n            this._buildInfoDefineStack = [];\n            this._buildInfoDependencies = [];\n        }\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            var result = [], resultLen = 0;\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\n                var m = this._modules2[i];\n                if (!m) {\n                    continue;\n                }\n                var location_1 = this._buildInfoPath[m.id] || null;\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\n                var dependencies = this._buildInfoDependencies[m.id];\n                result[resultLen++] = {\n                    id: m.strId,\n                    path: location_1,\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\n                    dependencies: dependencies,\n                    shim: null,\n                    exports: m.exports\n                };\n            }\n            return result;\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                throw new Error('Can only have one anonymous define call per script file');\n            }\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = new Error('StackLocation').stack;\n            }\n            this._currentAnnonymousDefineCall = {\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            };\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\n            var _this = this;\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\n            if (this._modules2[moduleId]) {\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\n                    console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\n            this._modules2[moduleId] = m;\n            if (this._config.isBuild()) {\n                this._buildInfoDefineStack[moduleId] = stack;\n                this._buildInfoDependencies[moduleId] = m.dependencies.map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\n            }\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\n            if (dependency === 'exports') {\n                return RegularDependency.EXPORTS;\n            }\n            if (dependency === 'module') {\n                return RegularDependency.MODULE;\n            }\n            if (dependency === 'require') {\n                return RegularDependency.REQUIRE;\n            }\n            // Normalize dependency and then request it from the manager\n            var bangIndex = dependency.indexOf('!');\n            if (bangIndex >= 0) {\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\n            }\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\n        };\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\n            var result = [], resultLen = 0;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\n            }\n            return result;\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\n            var m = this._modules2[dependency.id];\n            if (!m) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\n            }\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\n            }\n            return m.exports;\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new AMDLoader.Configuration(params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfig = function () {\n            return this._config;\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (moduleId) {\n            if (this._currentAnnonymousDefineCall !== null) {\n                var defineCall = this._currentAnnonymousDefineCall;\n                this._currentAnnonymousDefineCall = null;\n                // Hit an anonymous define call\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n        };\n        ModuleManager.prototype._createLoadError = function (moduleId, err) {\n            var _this = this;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\n            return {\n                errorCode: 'load',\n                moduleId: strModuleId,\n                neededBy: neededBy,\n                detail: err\n            };\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\n            var error = this._createLoadError(moduleId, err);\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                seenModuleId[i] = false;\n            }\n            var someoneNotified = false;\n            var queue = [];\n            queue.push(moduleId);\n            seenModuleId[moduleId] = true;\n            while (queue.length > 0) {\n                var queueElement = queue.shift();\n                var m = this._modules2[queueElement];\n                if (m) {\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\n                }\n                var inverseDeps = this._inverseDependencies2[queueElement];\n                if (inverseDeps) {\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                        var inverseDep = inverseDeps[i];\n                        if (!seenModuleId[inverseDep]) {\n                            queue.push(inverseDep);\n                            seenModuleId[inverseDep] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\n            var from = this._modules2[fromId];\n            if (!from) {\n                return false;\n            }\n            var inQueue = [];\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\n                inQueue[i] = false;\n            }\n            var queue = [];\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[fromId] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                var element = queue.shift();\n                var dependencies = element.dependencies;\n                if (dependencies) {\n                    // Walk the element's dependencies\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\n                        var dependency = dependencies[i];\n                        if (dependency.id === toId) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        var dependencyModule = this._modules2[dependency.id];\n                        if (dependencyModule && !inQueue[dependency.id]) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency.id] = true;\n                            queue.push(dependencyModule);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\n            if (fromId === toId || depth === 50) {\n                return [fromId];\n            }\n            var from = this._modules2[fromId];\n            if (!from) {\n                return null;\n            }\n            // Walk the element's dependencies\n            var dependencies = from.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\n                if (path !== null) {\n                    path.push(fromId);\n                    return path;\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\n            return result;\n        };\n        ModuleManager.prototype._loadModule = function (moduleId) {\n            var _this = this;\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\n                // known module\n                return;\n            }\n            this._knownModules2[moduleId] = true;\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\n            var paths = this._config.moduleIdToPaths(strModuleId);\n            if (AMDLoader.isNode && strModuleId.indexOf('/') === -1) {\n                paths.push('node|' + strModuleId);\n            }\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath_1 = paths[lastPathIndex];\n                    var recorder_1 = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\n                        _this._buildInfoPath[moduleId] = currentPath_1;\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder_1.record(AMDLoader.LoaderEventType.BeginLoadingScript, currentPath_1);\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\n                        if (_this._config.isBuild()) {\n                            _this._buildInfoPath[moduleId] = currentPath_1;\n                        }\n                        recorder_1.record(AMDLoader.LoaderEventType.EndLoadingScriptOK, currentPath_1);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder_1.record(AMDLoader.LoaderEventType.EndLoadingScriptError, currentPath_1);\n                        loadNextPath(err);\n                    });\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param module The module that has this dependency\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\n            var _this = this;\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\n                // known module\n                return;\n            }\n            this._knownModules2[pluginDependency.id] = true;\n            // Delegate the loading of the resource to the plugin\n            var load = (function (value) {\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\n            });\n            load.error = function (err) {\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\n            };\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (module) {\n            var _this = this;\n            var dependencies = module.dependencies;\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    module.exportsPassedIn = true;\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule && dependencyModule.isComplete()) {\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (this._hasDependencyPath(dependency.id, module.id)) {\n                    console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\n                    var cyclePath = this._findCyclePath(dependency.id, module.id, 0);\n                    cyclePath.reverse();\n                    cyclePath.push(dependency.id);\n                    console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\n                    // Break the cycle\n                    module.unresolvedDependenciesCount--;\n                    continue;\n                }\n                // record inverse dependency\n                this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\n                this._inverseDependencies2[dependency.id].push(module.id);\n                if (dependency instanceof PluginDependency) {\n                    var plugin = this._modules2[dependency.pluginId];\n                    if (plugin && plugin.isComplete()) {\n                        this._loadPluginDependency(plugin.exports, dependency);\n                        continue;\n                    }\n                    // Record dependency for when the plugin gets loaded\n                    var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\n                    if (!inversePluginDeps) {\n                        inversePluginDeps = [];\n                        this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\n                    }\n                    inversePluginDeps.push(dependency);\n                    this._loadModule(dependency.pluginId);\n                    continue;\n                }\n                this._loadModule(dependency.id);\n            }\n            if (module.unresolvedDependenciesCount === 0) {\n                this._onModuleComplete(module);\n            }\n        };\n        ModuleManager.prototype._onModuleComplete = function (module) {\n            var _this = this;\n            var recorder = this.getRecorder();\n            if (module.isComplete()) {\n                // already done\n                return;\n            }\n            var dependencies = module.dependencies;\n            var dependenciesValues = [];\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                var dependency = dependencies[i];\n                if (dependency === RegularDependency.EXPORTS) {\n                    dependenciesValues[i] = module.exports;\n                    continue;\n                }\n                if (dependency === RegularDependency.MODULE) {\n                    dependenciesValues[i] = {\n                        id: module.strId,\n                        config: function () {\n                            return _this._config.getConfigForModule(module.strId);\n                        }\n                    };\n                    continue;\n                }\n                if (dependency === RegularDependency.REQUIRE) {\n                    dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\n                    continue;\n                }\n                var dependencyModule = this._modules2[dependency.id];\n                if (dependencyModule) {\n                    dependenciesValues[i] = dependencyModule.exports;\n                    continue;\n                }\n                dependenciesValues[i] = null;\n            }\n            module.complete(recorder, this._config, dependenciesValues);\n            // Fetch and clear inverse dependencies\n            var inverseDeps = this._inverseDependencies2[module.id];\n            this._inverseDependencies2[module.id] = null;\n            if (inverseDeps) {\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\n                    var inverseDependencyId = inverseDeps[i];\n                    var inverseDependency = this._modules2[inverseDependencyId];\n                    inverseDependency.unresolvedDependenciesCount--;\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\n                        this._onModuleComplete(inverseDependency);\n                    }\n                }\n            }\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\n            if (inversePluginDeps) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                this._inversePluginDependencies2.delete(module.id);\n                // Resolve plugin dependencies one at a time\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\n                }\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n})(AMDLoader || (AMDLoader = {}));\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n// Limitation: To load jquery through the loader, always require 'jquery' and add a path for it in the loader configuration\nvar define;\nvar AMDLoader;\n(function (AMDLoader) {\n    var moduleManager;\n    var loaderAvailableTimestamp;\n    var DefineFunc = (function () {\n        function DefineFunc(id, dependencies, callback) {\n            if (typeof id !== 'string') {\n                callback = dependencies;\n                dependencies = id;\n                id = null;\n            }\n            if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\n                callback = dependencies;\n                dependencies = null;\n            }\n            if (!dependencies) {\n                dependencies = ['require', 'exports', 'module'];\n            }\n            if (id) {\n                moduleManager.defineModule(id, dependencies, callback, null, null);\n            }\n            else {\n                moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n            }\n        }\n        return DefineFunc;\n    }());\n    DefineFunc.amd = {\n        jQuery: true\n    };\n    AMDLoader.DefineFunc = DefineFunc;\n    var RequireFunc = (function () {\n        function RequireFunc() {\n            if (arguments.length === 1) {\n                if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\n                    RequireFunc.config(arguments[0]);\n                    return;\n                }\n                if (typeof arguments[0] === 'string') {\n                    return moduleManager.synchronousRequire(arguments[0]);\n                }\n            }\n            if (arguments.length === 2 || arguments.length === 3) {\n                if (Array.isArray(arguments[0])) {\n                    moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                    return;\n                }\n            }\n            throw new Error('Unrecognized require call');\n        }\n        RequireFunc.config = function (params, shouldOverwrite) {\n            if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n            moduleManager.configure(params, shouldOverwrite);\n        };\n        RequireFunc.getConfig = function () {\n            return moduleManager.getConfig().getOptionsLiteral();\n        };\n        /**\n         * Non standard extension to reset completely the loader state. This is used for running amdjs tests\n         */\n        RequireFunc.reset = function () {\n            moduleManager = new AMDLoader.ModuleManager(AMDLoader.scriptLoader, loaderAvailableTimestamp);\n        };\n        /**\n         * Non standard extension to fetch loader state for building purposes.\n         */\n        RequireFunc.getBuildInfo = function () {\n            return moduleManager.getBuildInfo();\n        };\n        /**\n         * Non standard extension to fetch loader events\n         */\n        RequireFunc.getStats = function () {\n            return moduleManager.getLoaderEvents();\n        };\n        return RequireFunc;\n    }());\n    AMDLoader.RequireFunc = RequireFunc;\n    function init() {\n        moduleManager = new AMDLoader.ModuleManager(AMDLoader.scriptLoader, loaderAvailableTimestamp);\n        if (AMDLoader.isNode) {\n            var _nodeRequire = (AMDLoader.global.require || require);\n            var nodeRequire = function (what) {\n                moduleManager.getRecorder().record(AMDLoader.LoaderEventType.NodeBeginNativeRequire, what);\n                try {\n                    return _nodeRequire(what);\n                }\n                finally {\n                    moduleManager.getRecorder().record(AMDLoader.LoaderEventType.NodeEndNativeRequire, what);\n                }\n            };\n            AMDLoader.global.nodeRequire = nodeRequire;\n            RequireFunc.nodeRequire = nodeRequire;\n        }\n        if (AMDLoader.isNode && !AMDLoader.isElectronRenderer) {\n            module.exports = RequireFunc;\n            // These two defs are fore the local closure defined in node in the case that the loader is concatenated\n            define = function () {\n                DefineFunc.apply(null, arguments);\n            };\n            require = RequireFunc;\n        }\n        else {\n            // The global variable require can configure the loader\n            if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\n                RequireFunc.config(AMDLoader.global.require);\n            }\n            if (!AMDLoader.isElectronRenderer) {\n                AMDLoader.global.define = define = DefineFunc;\n            }\n            else {\n                define = function () {\n                    DefineFunc.apply(null, arguments);\n                };\n            }\n            AMDLoader.global.require = RequireFunc;\n            AMDLoader.global.require.__$__nodeRequire = nodeRequire;\n        }\n    }\n    if (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd) {\n        init();\n        loaderAvailableTimestamp = AMDLoader.getHighPerformanceTimestamp();\n    }\n})(AMDLoader || (AMDLoader = {}));\n"]}