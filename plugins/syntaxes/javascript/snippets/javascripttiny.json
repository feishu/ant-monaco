{
	"define module": {
		"prefix": "define",
		"body": [
			"define([",
			"\t'require',",
			"\t'${1:dependency}'",
			"], function(require, ${2:factory}) {",
			"\t'use strict';",
			"\t$0",
			"});"
		],
		"description": "define module"
	},
	"For Loop": {
		"prefix": "for",
		"body": [
			"for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
			"\tlet ${3:element} = ${2:array}[${1:index}];",
			"\t$0",
			"}"
		],
		"description": "For Loop"
	},
	"For-Each Loop": {
		"prefix": "foreach",
		"body": [
			"${1:array}.forEach((${2:element}) => {",
			"\t$0",
			"}, this);"
		],
		"description": "For-Each Loop"
	},
	"For-In Loop": {
		"prefix": "forin",
		"body": [
			"for (let ${1:key} in ${2:object}) {",
			"\tif (${2:object}.hasOwnProperty(${1:key})) {",
			"\t\tlet ${3:element} = ${2:object}[${1:key}];",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "For-In Loop"
	},
	"Function Statement": {
		"prefix": "function",
		"body": [
			"function ${1:name}(${2:params}) {",
			"\t$0",
			"}"
		],
		"description": "Function Statement"
	},
	"If Statement": {
		"prefix": "if",
		"body": [
			"if (${1:condition}) {",
			"\t$0",
			"}"
		],
		"description": "If Statement"
	},
	"If-Else Statement": {
		"prefix": "ifelse",
		"body": [
			"if (${1:condition}) {",
			"\t$0",
			"} else {",
			"\t",
			"}"
		],
		"description": "If-Else Statement"
	},
	"New Statement": {
		"prefix": "new",
		"body": [
			"let ${1:name} = new ${2:type}(${3:arguments});$0"
		],
		"description": "New Statement"
	},
	"Switch Statement": {
		"prefix": "switch",
		"body": [
			"switch (${1:key}) {",
			"\tcase ${2:value}:",
			"\t\t$0",
			"\t\tbreak;",
			"",
			"\tdefault:",
			"\t\tbreak;",
			"}"
		],
		"description": "Switch Statement"
	},
	"While Statement": {
		"prefix": "while",
		"body": [
			"while (${1:condition}) {",
			"\t$0",
			"}"
		],
		"description": "While Statement"
	},
	"Do-While Statement": {
		"prefix": "dowhile",
		"body": [
			"do {",
			"\t$0",
			"} while (${1:condition});"
		],
		"description": "Do-While Statement"
	},
	"Try-Catch Statement": {
		"prefix": "trycatch",
		"body": [
			"try {",
			"\t$0",
			"} catch (${1:error}) {",
			"\t",
			"}"
		],
		"description": "Try-Catch Statement"
	},
	"Set Timeout Function": {
		"prefix": "settimeout",
		"body": [
			"setTimeout(() => {",
			"\t$0",
			"}, ${1:timeout});"
		],
		"description": "Set Timeout Function"
  },
  "App Initialize": {
		"prefix": "App",
		"body": [
      "App({", 
      "  onLaunch() {",
      "    $1",
      "  },",
      "  onShow() {",
      "    $2",
      "  },",
      "  onHide () {",
      "    $3",
      "  },",
      "  onError (msg) {",
      "    $4",
      "  }",
      "})$0"
		],
		"description": "App Initialize"
  },
  "Page Initialize": {
		"prefix": "Page",
		"body": [
      "Page({",
      "  data: {",
      "    $1",
      "  },",
      "  onLoad(options) {",
      "    // 生命周期函数--监听页面加载",
      "    $2",
      "  },",
      "  onReady() {",
      "    // 生命周期函数--监听页面初次渲染完成",
      "    $3",
      "  },",
      "  onShow() {",
      "    // 生命周期函数--监听页面显示",
      "    $4",
      "  },",
      "  onHide() {",
      "    // 生命周期函数--监听页面隐藏",
      "    $5",
      "  },",
      "  onUnload() {",
      "    // 生命周期函数--监听页面卸载",
      "    $6",
      "  },",
      "  onPullDownRefresh() {",
      "    // 页面相关事件处理函数--监听用户下拉动作",
      "    $7",
      "  },",
      "  onReachBottom() {",
      "    // 页面上拉触底事件的处理函数",
      "    $8",
      "  },",
      "  onShareAppMessage() {",
      "    // 用户点击右上角分享",
      "    return {",
      "      title: '$9',  // 分享标题",
      "      desc:  '$10',   // 分享描述",
      "      path:  '$11'    // 分享路径",
      "    }",
      "  }",
      "});$0"
		],
		"description": "Page Initialize"
  }
}
